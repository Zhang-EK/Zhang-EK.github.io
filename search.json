[{"title":"LaTeX入门","url":"/2022/03/01/LaTeX%E5%85%A5%E9%97%A8/","content":"<h1 id=\"LaTeX入门\"><a href=\"#LaTeX入门\" class=\"headerlink\" title=\"LaTeX入门\"></a>LaTeX入门</h1><h2 id=\"什么是LaTeX\"><a href=\"#什么是LaTeX\" class=\"headerlink\" title=\"什么是LaTeX\"></a>什么是LaTeX</h2><ul>\n<li>LaTeX是一种排版系统，它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单信件到完整书籍的所有其他种类的文档。</li>\n<li> <em>利用编写程序代码的方式写作</em>。</li>\n<li> 目前比较方便的windows下的使用环境是<em>TeXLive+vscode</em>，安装方法百度。</li>\n<li> 可以先用<em>Markdown</em>写点内容试试，两种语言的基本逻辑差不多，<em>Markdown</em>更轻量，网络博客中的文章基本都是用这个语法写成的。</li>\n</ul>\n<h2 id=\"为什么使用LaTeX\"><a href=\"#为什么使用LaTeX\" class=\"headerlink\" title=\"为什么使用LaTeX\"></a>为什么使用LaTeX</h2><ul>\n<li>在写作SCI论文时，杂志社有可能<em>不会提供</em>word格式的模版，但一定会有LaTeX的模版。</li>\n<li>LaTeX排版整洁，不会像word那样发生不可预料的<em>变化</em>。</li>\n<li>当在不同杂志社的模版之间<em>切换</em>时LaTeX更简洁、简单，因为代码是通用的。</li>\n<li>使用LaTeX写作科技论文时可以生成比较复杂的数学公式（现在word也可以办到）。</li>\n<li>使用LaTeX写作<em>可能</em>会在评审时给论文加分。</li>\n</ul>\n<h2 id=\"怎么使用LaTeX\"><a href=\"#怎么使用LaTeX\" class=\"headerlink\" title=\"怎么使用LaTeX\"></a>怎么使用LaTeX</h2><h3 id=\"文章基本结构\"><a href=\"#文章基本结构\" class=\"headerlink\" title=\"文章基本结构\"></a>文章基本结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass&#123;article&#125; %除了article之外还有book、report、beamer</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果要输入中文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125; %ctex+article</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\">你好！</span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所有位于\\begin{document}之前的内容是前言，在这里制定文档页面大小、尺寸、也可以指定需要倒入的宏包</li>\n<li>begin和end之间的才是正文，这里的内容会被排版生成到文档中</li>\n</ul>\n<p>例如要给文章设置标题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\title&#123;你好，world!&#125;</span><br><span class=\"line\">\\author&#123;张尔康&#125;</span><br><span class=\"line\">\\date&#123;\\today&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\">\\maketitle</span><br><span class=\"line\">你好，world!</span><br><span class=\"line\">\\end&#123;document&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文章的章节\"><a href=\"#文章的章节\" class=\"headerlink\" title=\"文章的章节\"></a>文章的章节</h3><p>LaTeX的章节生成十分的方便</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;article&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\section&#123;Introduction&#125;       %第一章</span><br><span class=\"line\">Microneedles is a .......</span><br><span class=\"line\"></span><br><span class=\"line\">\\section&#123;Methods&#125;         %第二章</span><br><span class=\"line\">\\subsection&#123;Fabrication of microneedles&#125;    </span><br><span class=\"line\">\\subsubsection&#123;Fabrication of the molds of microneedles&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\section&#123;Results&#125;        %第三章</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"文章中字体的调节\"><a href=\"#文章中字体的调节\" class=\"headerlink\" title=\"文章中字体的调节\"></a>文章中字体的调节</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\">\\textbf&#123;hi&#125;，我是张尔康      %加粗，boldfont</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\textit&#123;hi&#125;，我是张尔康      %斜体，italic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\underline&#123;hi&#125;，我是张尔康        %下划线</span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\usepackage&#123;hyperref&#125;</span><br><span class=\"line\">\\hypersetup&#123;hypertex=true,</span><br><span class=\"line\">            colorlinks=true,</span><br><span class=\"line\">            linkcolor=blue,</span><br><span class=\"line\">            anchorcolor=blue,</span><br><span class=\"line\">            citecolor=blue&#125;</span><br><span class=\"line\">\\usepackage&#123;graphicx&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">下面我将插入一张图片(Figure \\ref&#123;Figure 1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;figure&#125;[htb]   %开始图片环境</span><br><span class=\"line\">\\centering      %居中</span><br><span class=\"line\">\\includegraphics[width=0.5\\textwidth]&#123;Jupiter&#125;     %图片大小及图片名字，要使用png格式</span><br><span class=\"line\">\\caption&#123;Jupiter is a ......&#125;         %图题</span><br><span class=\"line\">\\label&#123;Figure 1&#125;      %引用的名字</span><br><span class=\"line\">\\end&#123;figure&#125;        %结束图片环境</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入表格、列表\"><a href=\"#插入表格、列表\" class=\"headerlink\" title=\"插入表格、列表\"></a>插入表格、列表</h3><ul>\n<li>无序列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;itemize&#125;</span><br><span class=\"line\">\\item 第一点</span><br><span class=\"line\">\\item 第二点</span><br><span class=\"line\">\\item 第三点</span><br><span class=\"line\">\\end&#123;itemize&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数字列表</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;enumerate&#125;</span><br><span class=\"line\">\\item 第一点</span><br><span class=\"line\">\\item 第二点</span><br><span class=\"line\">\\item 第三点</span><br><span class=\"line\">\\end&#123;enumerate&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>表格</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;tabular&#125;&#123;c c c&#125;     %三列，居中。l左对齐，r右对齐</span><br><span class=\"line\">过敏组 &amp; 对照组 &amp; 治疗组 \\\\</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\       %行之间用\\\\隔开</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 </span><br><span class=\"line\">\\end&#123;tabular&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;tabular&#125;&#123; |c|c|c| &#125;        %用竖线加表格边框，也可以|c||c|双边框</span><br><span class=\"line\">\\hline                               %\\hline加上边框,也可以再加一个\\hline添加双横线</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\ </span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">\\end&#123;tabular&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;tabular&#125;&#123; |p&#123;2cm&#125;|c|c| &#125;        %paragraph,手动设置列宽</span><br><span class=\"line\">\\hline                               </span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\ </span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">\\end&#123;tabular&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;table&#125;[htb]</span><br><span class=\"line\">\\center                     %居中</span><br><span class=\"line\">\\begin&#123;tabular&#125;&#123; |p&#123;2cm&#125;|c|c| &#125;       </span><br><span class=\"line\">\\hline                               </span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\ </span><br><span class=\"line\">\\hline</span><br><span class=\"line\">单元格 &amp; 单元格 &amp; 单元格 \\\\</span><br><span class=\"line\">\\hline</span><br><span class=\"line\">\\end&#123;tabular&#125;</span><br><span class=\"line\">\\caption&#123;体重表&#125;                %添加表题</span><br><span class=\"line\">\\end&#123;table&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入公式\"><a href=\"#插入公式\" class=\"headerlink\" title=\"插入公式\"></a>插入公式</h3><ul>\n<li>这个功能可能有的时候没有word方便</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">爱因斯坦的质能方程：$E=mc^2$      %行内公式</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;equation&#125;</span><br><span class=\"line\">E=mc^2</span><br><span class=\"line\">\\end&#123;equation&#125;       %行间公式</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复杂一点的公式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin&#123;equation&#125;</span><br><span class=\"line\">d=&#123;k \\varphi(n)+1&#125; \\over e</span><br><span class=\"line\">\\end&#123;equation&#125;      </span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入参考文献\"><a href=\"#插入参考文献\" class=\"headerlink\" title=\"插入参考文献\"></a>插入参考文献</h3><ul>\n<li>LaTex参考文献的插入和endnote等软件不一样</li>\n<li>下载文献时点击bibtex，网页会显示出以下内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@article&#123;jones2017epicutaneous,</span><br><span class=\"line\">  title=&#123;Epicutaneous immunotherapy for the treatment of peanut allergy in children and young adults&#125;,</span><br><span class=\"line\">  author=&#123;Jones, Stacie M and Sicherer, Scott H and Burks, A Wesley and Leung, Donald YM and Lindblad, Robert W and Dawson, Peter and Henning, Alice K and Berin, M Cecilia and Chiang, David and Vickery, Brian P and others&#125;,</span><br><span class=\"line\">  journal=&#123;Journal of Allergy and Clinical Immunology&#125;,</span><br><span class=\"line\">  volume=&#123;139&#125;,</span><br><span class=\"line\">  number=&#123;4&#125;,</span><br><span class=\"line\">  pages=&#123;1242--1252&#125;,</span><br><span class=\"line\">  year=&#123;2017&#125;,</span><br><span class=\"line\">  publisher=&#123;Elsevier&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这就是Latex中的参考文献格式</p>\n<ul>\n<li>使用时，首先在Latex文件的文件夹下创建一个新的bib文件（可以用记事本打开），并把上面的引用信息复制进去。（也可以使用别的管理文献的工具将end文件转化为bibtex文件，endnote等软件均有此功能）</li>\n<li>jones2017epicutaneous，就是引用文献的label，在文章中输入\\cite{li1999murine}来引用</li>\n</ul>\n","categories":["2022"],"tags":["软件笔记"]},{"title":"多样性指数","url":"/2023/01/09/Alpha%E5%92%8CBeta%E5%A4%9A%E6%A0%B7%E6%80%A7/","content":"<h1 id=\"多样性指数\"><a href=\"#多样性指数\" class=\"headerlink\" title=\"多样性指数\"></a>多样性指数</h1><h2 id=\"Alpha多样性指数\"><a href=\"#Alpha多样性指数\" class=\"headerlink\" title=\"Alpha多样性指数\"></a>Alpha多样性指数</h2><p>Alpha多样性指数是用于观测单一种群内生物种类数量以及物种间相对多度的一种指数。有以下三个基本概念：</p>\n<ol>\n<li>丰富度（Richness）：群落内物种的数量。</li>\n<li>丰度（Abundance）：物种所包含的个体数量。</li>\n<li>均匀度（Evenness）：样本内不同物种所包含的个体数量的一致程度。</li>\n</ol>\n<p>这里主要介绍Chao1指数、Shannon指数、Simpson指数。</p>\n<h3 id=\"Chao1指数\"><a href=\"#Chao1指数\" class=\"headerlink\" title=\"Chao1指数\"></a>Chao1指数</h3><p>$$<br>S_1=S_{obs}+\\frac{F^2_1}{2F_2}<br>$$</p>\n<p><strong>公式：</strong>S<sub>obs</sub>为观察到的物种数，F<sub>1</sub>为只出现一次的物种数，F<sub>2</sub>为出现两次的物种数。</p>\n<p><strong>定义解释：</strong>在对群落样本进行抽样的时候如果还有没有被发现的物种，那么抽样的结果中就一直会存在只出现一次的物种，一直抽样直到没有只出现一次的物种时（也就是观察到的物种至少出现两次）就可以认为此时的被抽出的物种数目最接近样本的理论最高值。</p>\n<p><em><strong>Chao1指数越大，样本内的物种种类也就越多，Alpha多样性越高。</strong></em></p>\n<h3 id=\"Shannon指数\"><a href=\"#Shannon指数\" class=\"headerlink\" title=\"Shannon指数\"></a>Shannon指数</h3><p>$$<br>H=-\\sum(P_i)(\\log_2P_i)<br>$$</p>\n<p>$$<br>P_i=\\frac{n_i}{N}<br>$$</p>\n<p><strong>公式：</strong>P<sub>i</sub>为第i种物种的个体数占总个体数N的比例。</p>\n<p><strong>定义解释：</strong>对整个群落的样本进行抽样，预测下一个抽到的物种是什么，该指数反映的就是抽取到的物种的不确定性。</p>\n<p><em><strong>群落的丰富度越高，且不同物种分布越均匀，那么就越难预测下个采集的物种是什么，不确定性也就越高，Shannon指数也就越大，Alpha多样性越高。</strong></em></p>\n<h3 id=\"Simpson指数\"><a href=\"#Simpson指数\" class=\"headerlink\" title=\"Simpson指数\"></a>Simpson指数</h3><p>$$<br>D_s=1-\\sum^s_{i=1}p_i^2<br>$$</p>\n<p><strong>公式：</strong>P<sub>i</sub>为第i种物种的个体数占总个体数的比例。</p>\n<p><strong>定义解释：</strong>在足够大的样本中，有放回的先后抽取两个样本，抽到同一个物种的概率就是P<sub>i</sub><sup>2</sup>，再将所有物种的概率相加并被1减去就得到了Simpson指数。也可以看出Simpson系数的范围在0-1之间。</p>\n<p><em><strong>群落的丰富度越高，且不同物种分布越均匀，Simpson指数也就越大，越接近于1，也就代表着Alpha多样性越高。</strong></em></p>\n<h2 id=\"Beta多样性指数\"><a href=\"#Beta多样性指数\" class=\"headerlink\" title=\"Beta多样性指数\"></a>Beta多样性指数</h2><p>Beta多样性反映的是不同种群间生物多样性的比较。要想得到Beta多样性指数，首先要从得到不同样品之间的距离矩阵开始。</p>\n<h3 id=\"距离矩阵算法\"><a href=\"#距离矩阵算法\" class=\"headerlink\" title=\"距离矩阵算法\"></a>距离矩阵算法</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>基于独立OTU</th>\n<th>基于系统发育树</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>加权</td>\n<td>Bray-curtis</td>\n<td>weighted unifrac</td>\n</tr>\n<tr>\n<td>非加权</td>\n<td>Jaccard</td>\n<td>Unweighted unifrac</td>\n</tr>\n</tbody></table>\n<p>距离矩阵的算法主要就是以上这四种，通过这些算法来得到样本间的距离最后得到距离矩阵。加权和不加权的区别在于是否不仅考虑物种的有无还要考虑物种间丰度的距离。基于OTU的算法是根据<strong>不同物种</strong>在不同样品中的分布不同（加权或不加权）来计算距离的，而基于系统发育树的算法则考虑的是<strong>不同样品间的物种进化关系</strong>。</p>\n<p>一般来说基于OTU和系统发育树的计算方法都要使用。对于选择加权算法还是非加权算法，加权算法对于丰度较高的物种敏感性更高，非加权算法对稀有物种的敏感性更高。</p>\n<h3 id=\"PCA分析\"><a href=\"#PCA分析\" class=\"headerlink\" title=\"PCA分析\"></a>PCA分析</h3><p>主成分分析(Principal componentanalysis)。PCA采用降维的思想，将组成复杂的数据信息（样本中包含大量物种信息，没有已知的坐标轴可以解释分布）进行降维排序，寻找能最大程度反应规律的坐标系。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/12314.png\" alt=\"12314\" style=\"zoom:67%;\" />\n\n<p>最后得到的结果横纵轴分别代表第一第二主成分，并且会标注该主成分对样品OTU差异的贡献比例。同组样品的距离远近说明样品的重复性强弱，不同组样本的远近就反映了组间的群落差异。</p>\n<p><img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/7387.png\" alt=\"7387\"></p>\n<h3 id=\"PCoA分析\"><a href=\"#PCoA分析\" class=\"headerlink\" title=\"PCoA分析\"></a>PCoA分析</h3><p>主坐标分析(Principal co-ordinates analysis)。PCoA分析同样采用降维的思想对样本关系进行低维平面的投影，不同的是，PCA分析是对样本中物种丰度数据的直接投影，而PCoA则是将样本数据经过不同距离算法获得样本距离矩阵的投影，在图形中样本点的距离等于距离矩阵中的差异数据距离。</p>\n<p>将样品间的距离在坐标轴上进行不同角度投影，找到最能够反映原始距离分布的前两个坐标轴进行数据输出。 与PCA不同，PCoA是对样品间距离（连线）的投影，在二维平面上展示的是样品间距离的信息，而不是样品的位置信息（也就是说其实PCoA在多维得到的并不是一个有位置信息的图，点之间的位置关系都是相对存在的）。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/783758.png\" alt=\"783758\" style=\"zoom:67%;\" />\n\n<p>PCoA的结果图选择输入不同的相似距离矩阵（算法）得到的结果存在一定程度的差异。最后得到的结果横纵轴分别代表第一第二主坐标，并且会标注该主坐标对样品距离矩阵差异的贡献比例。同组样品的距离远近说明样品的重复性强弱，不同组样本的远近就反映了组间的样本距离差异。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/2843758.png\" alt=\"2843758\" style=\"zoom:67%;\" />\n\n<h3 id=\"UMDS分析\"><a href=\"#UMDS分析\" class=\"headerlink\" title=\"UMDS分析\"></a>UMDS分析</h3><p>非量度多维标度分析法(Non-metric multidimensional scaling)。NMDS分析与PCoA分析的相同点在于两者都使用样本相似性距离矩阵进行降维排序分析，从而在二维平面上对样本关系做出判断。不同于PCoA分析，NMDS弱化了对实际距离数值的依赖，更加强调数值间的排名（秩次），例如三个样本的两两相似性距离为（1,2,3）或（10,20,30）在NMDS分析上的排序一致，所呈现的效果相同。</p>\n<p>有一个stress值专门用来评价UMDS的结果图降维效果，越接近于0说明越能反映数据排序的真实情况，一般要求&lt;0.1。</p>\n<p>选择不同的距离矩阵算法同样也会对UMDS结果图产生影响。同组样本点距离远近说明了样本的重复性强弱，不同组样本的远近则反应了组间样本距离在秩次（数据排名）上的差异。另外，NMDS是距离值的秩次（数据排名）信息的评估，图形上样本信息仅反映样本间数据秩次信息的远近，而不反映真实的数值差异，横纵坐标轴并无权重意义，横轴不一定比纵轴更加重要。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/48258.png\" alt=\"48258\" style=\"zoom:67%;\" />\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">PCA</th>\n<th align=\"center\">PCoA</th>\n<th align=\"center\">NMDS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">输入数据</td>\n<td align=\"center\">OTU丰度表</td>\n<td align=\"center\">相似性距离表</td>\n<td align=\"center\">相似性距离表</td>\n</tr>\n<tr>\n<td align=\"center\">常见分析点</td>\n<td align=\"center\">OTU分析</td>\n<td align=\"center\">Beta多样性分析</td>\n<td align=\"center\">Beta多样性分析</td>\n</tr>\n<tr>\n<td align=\"center\">分析信息</td>\n<td align=\"center\">原始OTU数据</td>\n<td align=\"center\">原始相似性距离</td>\n<td align=\"center\">相似性距离数值排序</td>\n</tr>\n<tr>\n<td align=\"center\">是否含stress值</td>\n<td align=\"center\">否</td>\n<td align=\"center\">否</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">坐标是否有权重意义</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">否</td>\n</tr>\n</tbody></table>\n","categories":["2023"],"tags":["生信软件学习笔记"]},{"title":"R语言中的数据框处理","url":"/2023/04/03/R%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A1%86%E5%A4%84%E7%90%86/","content":"<h1 id=\"R语言中的数据框处理\"><a href=\"#R语言中的数据框处理\" class=\"headerlink\" title=\"R语言中的数据框处理\"></a>R语言中的数据框处理</h1><h2 id=\"dplyr包中的函数\"><a href=\"#dplyr包中的函数\" class=\"headerlink\" title=\"dplyr包中的函数\"></a>dplyr包中的函数</h2><h3 id=\"处理变量的函数（处理列）\"><a href=\"#处理变量的函数（处理列）\" class=\"headerlink\" title=\"处理变量的函数（处理列）\"></a>处理变量的函数（处理列）</h3><h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data1 &lt;- starwars %&gt;% select(name,height,mass,sex,species,films) <span class=\"comment\">#名字全列出来</span></span><br><span class=\"line\">data2 &lt;- starwars %&gt;% select(name:mass)  <span class=\"comment\">#直接选取范围</span></span><br><span class=\"line\">data3 &lt;- starwars %&gt;% select(<span class=\"number\">1</span>:<span class=\"number\">6</span>)</span><br><span class=\"line\">data4 &lt;- starwars %&gt;% select(<span class=\"number\">1</span>:<span class=\"number\">3</span>,<span class=\"number\">7</span>:<span class=\"number\">8</span>)</span><br><span class=\"line\">data5 &lt;- starwars %&gt;% select(name, species, contains(<span class=\"string\">&quot;color&quot;</span>))  <span class=\"comment\">#按照字符的包含条件筛选</span></span><br><span class=\"line\">data6 &lt;- starwars %&gt;% select(name, height, weight = mass)   <span class=\"comment\">#还可以选取的同时直接重命名，注意新旧名字的前后顺序</span></span><br></pre></td></tr></table></figure>\n\n<p>可以根据变量的名字筛选，或者对变量重新命名。</p>\n<h4 id=\"mutate\"><a href=\"#mutate\" class=\"headerlink\" title=\"mutate\"></a>mutate</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data13 &lt;- data1 %&gt;% mutate(BMI = mass/((height/<span class=\"number\">100</span>)^<span class=\"number\">2</span>)) %&gt;% arrange(-BMI)</span><br></pre></td></tr></table></figure>\n\n<p>可以新增加一个变量追加到数据框的最后一列，也就是新建一列。</p>\n<h3 id=\"筛选个案（处理行）\"><a href=\"#筛选个案（处理行）\" class=\"headerlink\" title=\"筛选个案（处理行）\"></a>筛选个案（处理行）</h3><h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data8 &lt;- starwars %&gt;% select(name,height,mass,sex,species) %&gt;% filter(species == <span class=\"string\">&quot;Droid&quot;</span>) %&gt;% arrange(height)  </span><br><span class=\"line\">data9 &lt;- starwars %&gt;% select(name,height,mass,sex,species) %&gt;% filter((species == <span class=\"string\">&quot;Human&quot;</span> | species == <span class=\"string\">&quot;Droid&quot;</span>) &amp; height &lt; <span class=\"number\">200</span>) %&gt;% arrange(height) <span class=\"comment\"># “|”表示或者，“,“和“&amp;”表示且</span></span><br><span class=\"line\">data9 &lt;- starwars %&gt;% select(name,height,mass,sex,species) %&gt;% filter((species %in% <span class=\"built_in\">c</span>(<span class=\"string\">&quot;Human&quot;</span>\t,<span class=\"string\">&quot;Droid&quot;</span>)) &amp; height &lt; <span class=\"number\">200</span>) %&gt;% arrange(height) <span class=\"comment\"># %in%也可以达到上面相同的效果</span></span><br><span class=\"line\">data9 &lt;- starwars %&gt;% select(name,height,mass,sex,species) %&gt;% filter(!<span class=\"built_in\">is.na</span>(height)) %&gt;% arrange(height)  <span class=\"comment\">#&quot;!&quot;表示取相反的，所以这项命令通过filter保留了没有NA的行</span></span><br></pre></td></tr></table></figure>\n\n<p>可以根据变量的结果筛选个案，也就是通过列来筛选行。</p>\n<h4 id=\"arrange\"><a href=\"#arrange\" class=\"headerlink\" title=\"arrange\"></a>arrange</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data8 &lt;- starwars %&gt;% select(name,height,mass,sex,species) %&gt;% filter(species == <span class=\"string\">&quot;Droid&quot;</span>) %&gt;% arrange(-height)  <span class=\"comment\">#降序</span></span><br></pre></td></tr></table></figure>\n\n<p>同上，可以通过某变量的值来排序，调整个案的顺序，也就是通过列的值来排序行。</p>\n<h3 id=\"处理单元格数据\"><a href=\"#处理单元格数据\" class=\"headerlink\" title=\"处理单元格数据\"></a>处理单元格数据</h3><h4 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if_else\"></a>if_else</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data14 &lt;- data13 %&gt;% drop_na(mass) %&gt;% mutate(weight_size = if_else(mass &gt; <span class=\"number\">100</span> , </span><br><span class=\"line\">                                                          <span class=\"string\">&quot;large&quot;</span>,</span><br><span class=\"line\">                                                          <span class=\"string\">&quot;small&quot;</span>))   <span class=\"comment\">#drop_na把有mass列中NA的行删掉了</span></span><br></pre></td></tr></table></figure>\n\n<p>可以根据变量的数值来进行条件转换，比如上面的例子就是检测mass是否大于100，如果大于就在新增加的一列weight_size中命名为large，否则则为small。</p>\n<h4 id=\"recode\"><a href=\"#recode\" class=\"headerlink\" title=\"recode\"></a>recode</h4><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data15 &lt;- data14 %&gt;% mutate(weight_size = recode(weight_size, <span class=\"string\">&quot;large&quot;</span>=<span class=\"number\">1</span> ,</span><br><span class=\"line\">                            <span class=\"string\">&quot;small&quot;</span>=<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<p>可以根据单元格中的内容成组转换，比如将large体型转化为1，small体型转化为2。</p>\n","categories":["2023"],"tags":["R学习笔记"]},{"title":"关于统计检验的一些知识笔记","url":"/2022/12/08/test.method/","content":"<h1 id=\"关于统计检验的一些知识笔记（还需补充）\"><a href=\"#关于统计检验的一些知识笔记（还需补充）\" class=\"headerlink\" title=\"关于统计检验的一些知识笔记（还需补充）\"></a>关于统计检验的一些知识笔记（还需补充）</h1><h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>总的来说，统计检验是为了回答以下几个问题</p>\n<ul>\n<li>独不独立？<ul>\n<li>如果独立，那么就证明两种处理之间不相关</li>\n<li>如果不独立，那么就证明两种处理之间相关，则需要继续回答下一个问题<ul>\n<li>它们之间存在怎么样的关联？并继续下一个问题<ul>\n<li>它们之间的这种关联有多大的可信度？</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"独不独立？\"><a href=\"#独不独立？\" class=\"headerlink\" title=\"独不独立？\"></a>独不独立？</h2><p>要检测独不独立，则又要回答几个问题</p>\n<ul>\n<li>数据之间是连续型还是离散型？<ul>\n<li>如果是离散型（使用卡方检验或者Fisher’s exact test）<ul>\n<li>单因素卡方检验（卡方拟合度检验 chi-square goodness of fit test）</li>\n<li>多因素卡方检验 （卡方独立性检验 chis-square test of independence）</li>\n</ul>\n</li>\n<li>如果是连续型（使用t检验或者wilcox检验）<ul>\n<li>连续型数据且数据分布符合正态分布，那么使用t检验（当然如果组比较多那么就使用ANOVA也就是多重t检验）<ul>\n<li>如果观测对象相互之间独立，比如A1，B1，C1，那么使用普通t检验</li>\n<li>如果观测对象之间有联系，比如需要对比A1在接受某处理前后的数据，那么使用配对t检验</li>\n</ul>\n</li>\n<li>连续型数据但数据不符合正态分布，那么使用wilcox test</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"卡方检验\"><a href=\"#卡方检验\" class=\"headerlink\" title=\"卡方检验\"></a>卡方检验</h3><p>#离散型数据 </p>\n<p>卡方检验用于检测观察到的类别变量的分布是否与期望的不同，也就是期望值和观测值是否有显著差异。首先需要确定零假设：期望值和观测值之间没有差异。那么通过计算得到的假设成立可能性很低就说明期望值和观测值之间有差异（也就是p&lt;0.05）。如果检测样本只受到一种因素而影响分布那么就使用单因素卡方检验，如果是两种或多种就使用多因素卡方检验。df为自由度（单因素=x-1，多因素=(x-1)(y-1)）。</p>\n<p>例子：判断一个骰子是否被人动了手脚。那么就是要判断骰子的观测值和期望值是否有差距，所以是单因素。</p>\n<p>判断男生和女生对于体育喜爱程度（是否喜爱）是否有差异，就是多因素。</p>\n<h3 id=\"t检验\"><a href=\"#t检验\" class=\"headerlink\" title=\"t检验\"></a>t检验</h3><p>#连续性数据 #组别小于等于2</p>\n<p>t检验用于检测两组是否符合同一个正态分布，也就是没有差距（这就是假设前提）。</p>\n<p>唯一需要注意的是是否需要使用配对t检验，如果不同组使用的是同一观测对象，那么就需要使用配对t检验。</p>\n<h3 id=\"ANOVA检验-（方差分析）\"><a href=\"#ANOVA检验-（方差分析）\" class=\"headerlink\" title=\"ANOVA检验 （方差分析）\"></a>ANOVA检验 （方差分析）</h3><p>#连续性数据 #组别大于2 #消除误差 #多重t检验</p>\n<p>这里又要分为one-way ANOVA 和 two-way ANOVA 以及多因素方差分析</p>\n<p>单因素方差分析：不同职业群体（职业分组大于2）收入的差异。</p>\n<p>双因素方差分析：同一学历时,不同性别是否有着网购满意度差异性（x定类数据有两个：学历和性别）。</p>\n<p>多因素方差分析：比如研究者测试某新药对于胆固醇水平是否有疗效；研究者共招募72名被试，男女分别为36名，以及男女分别再细分使用新药和普通药物；同时高血压患者对于新药可能有干扰，因而研究者将被试是否患高血压也纳入考虑范畴中。因而最终，X共分为三个，分别是药物(旧药和新药)、性别，是否患高血压；Y为胆固醇水平。</p>\n<h3 id=\"上述三种方法的区别\"><a href=\"#上述三种方法的区别\" class=\"headerlink\" title=\"上述三种方法的区别\"></a>上述三种方法的区别</h3><table>\n<thead>\n<tr>\n<th align=\"center\">X数据类型</th>\n<th align=\"center\">X组别数</th>\n<th align=\"center\">Y数据类型</th>\n<th align=\"center\">分析方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">定类</td>\n<td align=\"center\">2或更多</td>\n<td align=\"center\">定量</td>\n<td align=\"center\">方差分析</td>\n</tr>\n<tr>\n<td align=\"center\">定类</td>\n<td align=\"center\">2</td>\n<td align=\"center\">定量</td>\n<td align=\"center\">t检验</td>\n</tr>\n<tr>\n<td align=\"center\">定类</td>\n<td align=\"center\">任意</td>\n<td align=\"center\">定类</td>\n<td align=\"center\">卡方检验</td>\n</tr>\n</tbody></table>\n<h2 id=\"什么关联？多大关联？\"><a href=\"#什么关联？多大关联？\" class=\"headerlink\" title=\"什么关联？多大关联？\"></a>什么关联？多大关联？</h2><h3 id=\"相关性检验\"><a href=\"#相关性检验\" class=\"headerlink\" title=\"相关性检验\"></a>相关性检验</h3><p>检验两组数据之间是否具有相关性，如果有，那么是正相关还是负相关，相关强度有多少？</p>\n<p>相关系数[-1,1]，从极其负相关到极其正相关。并且经过相关性检验还会得到p值来判断结论的可信程度。</p>\n","categories":["2022"],"tags":["生信软件学习笔记"]},{"title":"宏基因组测序及分析流程整理","url":"/2023/01/04/%E4%BA%8C%E4%BB%A3%E3%80%81%E4%B8%89%E4%BB%A3%E5%AE%8F%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%B5%8B%E5%BA%8F%E5%8F%8A%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/","content":"<h1 id=\"宏基因组测序及分析流程\"><a href=\"#宏基因组测序及分析流程\" class=\"headerlink\" title=\"宏基因组测序及分析流程\"></a>宏基因组测序及分析流程</h1><h2 id=\"二代测序数据拼接\"><a href=\"#二代测序数据拼接\" class=\"headerlink\" title=\"二代测序数据拼接\"></a>二代测序数据拼接</h2><p>质控完成之后，宏基因组二代测序的数据拼接软件使用基本和单菌拼接保持一致，目前大部分软件都支持宏基因组的拼接模式。</p>\n<h3 id=\"SPAdes\"><a href=\"#SPAdes\" class=\"headerlink\" title=\"SPAdes\"></a>SPAdes</h3><p>该软件支持宏基因组的拼接模式，<strong>只需要加上参数–meta即可</strong>。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">spades.py --meta -<span class=\"number\">1</span> read_1.fastq.gz -<span class=\"number\">2</span> read_2.fastq.gz -o spades_result -t <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"megahit\"><a href=\"#megahit\" class=\"headerlink\" title=\"megahit\"></a>megahit</h3><p>该软件运行速度快于SPAdes且占用的计算资源也比较少，<strong>但组装效果不如前者</strong>。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">megahit -o megahit -<span class=\"number\">1</span> read_1.fastq.gz -<span class=\"number\">2</span> read_2.fastq.gz -t <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三代测序数据拼接\"><a href=\"#三代测序数据拼接\" class=\"headerlink\" title=\"三代测序数据拼接\"></a>三代测序数据拼接</h2><h3 id=\"flye\"><a href=\"#flye\" class=\"headerlink\" title=\"flye\"></a>flye</h3><p>质控后，三代测序宏基因组数据仍然可以使用flye进行组装，它其中有一个metaflye的模块专门用来组装宏基因组数据。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">flye --nano-raw nano.fastq.gz -g <span class=\"number\">5</span>m -t <span class=\"number\">12</span> -o metaflye_result --meta</span><br></pre></td></tr></table></figure>\n\n<p><strong>值得注意的是在进行完数据拼接后还可以使用纠错软件进行纠错（pilon、racon等），这里可能会涉及到使用二代测序数据辅助纠错</strong>。</p>\n<h2 id=\"二代三代软件拼接结果对比\"><a href=\"#二代三代软件拼接结果对比\" class=\"headerlink\" title=\"二代三代软件拼接结果对比\"></a>二代三代软件拼接结果对比</h2><p><img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/image.png\"></p>\n<p>这里可以很明显的看到同为二代测序拼接，megahit所拼接出的contigs不如SPAdes长。Nanopore三代测序在读长方面的优势还是比较明显的。</p>\n<h2 id=\"宏基因组物种分类\"><a href=\"#宏基因组物种分类\" class=\"headerlink\" title=\"宏基因组物种分类\"></a>宏基因组物种分类</h2><h3 id=\"物种分类数据库\"><a href=\"#物种分类数据库\" class=\"headerlink\" title=\"物种分类数据库\"></a>物种分类数据库</h3><p>当前宏基因组物种分类的方法主要就是使用NCBI的物种分类数据库进行比对分类。将测序得到的序列和数据库（如nt库、nr库、refseq库）中的序列进行比对，如果两者具有很好的相似性则认为两者为同源序列，具有共同的祖先。</p>\n<ul>\n<li>nt库为Nucleotide Sequence Database，即核酸序列数据库，其中含有所有目前已知的核酸序列（基因组），是有冗余的。</li>\n<li>nr库为Non-Redundant Protein Sequence Database，即非冗余蛋白库（只包含基因预测的蛋白而不是基因组）。一般DIAMOND比对使用这个数据库。</li>\n<li>refseq库是NCBI官方验证的可以代表某个物种的参考序列所组成的数据库，是非冗余的，<strong>一般物种分类就是使用这个</strong>。</li>\n<li>taxonomy数据库。这个库里的内容主要是物种的名字和种系，这些物种都至少在遗传数据库中有一条核酸或蛋白序列。其目的是为序列数据库建立一个一致的种系发生分类学，<strong>物种分类也需要这个</strong>。</li>\n</ul>\n<h3 id=\"物种鉴定软件\"><a href=\"#物种鉴定软件\" class=\"headerlink\" title=\"物种鉴定软件\"></a>物种鉴定软件</h3><img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/111.png\" style=\"zoom:67%;\" />\n\n<p>基本常用的软件都在上图中。一般DNA核酸比对还是使用<strong>Kraken2</strong>比较多，蛋白质一般使用<strong>DIAMOND</strong>和<strong>kauju</strong>，<strong>MetaPhlAn2</strong>也比较常用。</p>\n<p><em><strong>可以使用mock数据集进行测试。</strong></em></p>\n<h3 id=\"三代测序数据处理\"><a href=\"#三代测序数据处理\" class=\"headerlink\" title=\"三代测序数据处理\"></a>三代测序数据处理</h3><h4 id=\"Centrifuge\"><a href=\"#Centrifuge\" class=\"headerlink\" title=\"Centrifuge\"></a>Centrifuge</h4><p>这里主要介绍一下centrifuge软件，物种鉴定使用方式如下</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">centrifuge -<span class=\"keyword\">x</span> centrifuge_h+p+v_20200318/hpv -U nanopore.fastq.gz --report-file report.tsv -S result.tsv -p <span class=\"number\">64</span> &gt;centrifuge.log</span><br></pre></td></tr></table></figure>\n\n<p>会输出两个结果</p>\n<ol>\n<li><p>按照reads进行结果统计的结果centrifuge_output.tsv</p>\n<p><img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/image2.png\" alt=\"image2\"></p>\n</li>\n</ol>\n<p>一共是八列，从左到右分别是reads ID、比对上的序列的Accession ID、物种分类ID、序列比对评分、第二比对结果的评分、比对上的部分的序列长度、总reads长度、该reads比对上的物种序列个数。</p>\n<ol start=\"2\">\n<li>按照比对上的物种进行的统计centrifuge_report.tsv</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/image%20(1).png\" alt=\"image (1)\"></p>\n<p>一共是七列，从左到右分别是比对上的物种名字、物种分类ID、物种层级、基因组大小、比对上的reads数量（每一个reads可以比对上多个物种）、唯一比对上该物种的reads数量、丰度（比对上的区域/整个基因组的长度）。</p>\n<p>在得到了结果之后就可以使用R等方式对tsv表格进行过滤。比如一条reads会比对到数据库中的多个物种，通常我们需要选择每条reads最优的比对，并且还要去除掉比对上的reads太少的物种。当然，命令行也能进行结果筛选。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">awk -F <span class=\"string\">&quot;\\t&quot;</span> <span class=\"string\">&#x27;&#123;if ($3==&quot;species&quot; &amp;&amp; $6 &gt;5) print $1&quot;\\t&quot;$6&#125;&#x27;</span> <span class=\"number\">0</span>.<span class=\"number\">01_</span>report.tsv &gt;<span class=\"number\">0</span>.<span class=\"number\">01</span>.txt</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>这里标记一篇文章，<a href=\"https://www.nature.com/articles/s41587-019-0156-5\">Nanopore metagenomics enables rapid clinical diagnosis of bacterial lower respiratory infection</a>，这篇文章中有40个潜在肺炎病人肺部宏基因组测序的结果，可以通过Centrifuge比对的方式得到样品中占决定性多数的细菌种类，如果该细菌与肺炎有关那么就判定该患者有较大可能患有肺炎。该文章证明利用纳米孔基因组测序和宏基因组分析可以快速地进行临床诊断下呼吸道感染。其中的数据可以用来练习宏基因组物种分类。</strong></em></p>\n<h3 id=\"二代测序数据处理\"><a href=\"#二代测序数据处理\" class=\"headerlink\" title=\"二代测序数据处理\"></a>二代测序数据处理</h3><p>这一部分的几个软件或流程基本都来自于<strong>Biobakery workflow</strong>。这个流程来自于哈佛的Huttenhower团队。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/32535.png\" style=\"zoom:50%;\" />\n\n<ol>\n<li>数据质控：使用Kneaddata，该软件先调用Trimmomatic过滤数据，然后利用bowtie2或bmtagger比对去除宿主数据。</li>\n<li>如果不拼接数据，则可以直接使用MetaPhlAn2或者Kraken2实现序列的物种分类及物种丰度分析。功能鉴定则可以使用Humann完成。</li>\n<li>也可以先对Reads进行拼接（Megahit、Metaspades等软件），然后使用Prokka软件从组装好的Contig或者Scafford预测基因，并使用cd-hit构建非冗余基因集。然后利用Nr、COG、GO、KEGG等数据库对基因进行注释。</li>\n<li>如果有多样品则可以进行分组统计，将得到的物种/基因/功能表格利用R或者STAMP等软件在这三个层次进行分析。</li>\n</ol>\n<h4 id=\"Kneaddata\"><a href=\"#Kneaddata\" class=\"headerlink\" title=\"Kneaddata\"></a>Kneaddata</h4><p>Kneaddata是一个数据质控过滤流程，整合了Fasqc质控，Trimmomatic数据过滤，Bowtie2比对数据库过滤宿主等功能。输入原始数据后就可以得到Cleandata。默认集成了人、小鼠、rRNA等数据库。如果是其他宿主，可以自行建库。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">kneaddata -i reads_1.fastq.gz -i reads_2.fastq.gz -db path\\Homo_sapiens -o kneaddata_output --remove-intermediate-output -v -t <span class=\"number\">12</span> --trimmomatic-options <span class=\"string\">&#x27;ILLUMINACLIP:~/miniconda3/envs/biobakery/share/trimmomatic/adapters/TruSeq3-PE.fa:2:40:15 SLIDINGWINDOW:4:20 MINLEN:50&#x27;</span> --reorder --bowtie2-options <span class=\"string\">&#x27;--very-sensitive --dovetail&#x27;</span> --run-fastqc-start --run-fastqc-end</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>DB：/data/Food/primary/R0987_nextgen/Erkang.Zhang/20221130_course/course_4_meta/kneadData_database/</strong></em></p>\n<h4 id=\"MetaPhlAn\"><a href=\"#MetaPhlAn\" class=\"headerlink\" title=\"MetaPhlAn\"></a>MetaPhlAn</h4><p>MetaPhlan是用于二代测序物种分类的工具，利用快速比对工具Bowtie2与Marker基因集比对（非全基因组），所以运行速度非常的快。输入Kneaddata过滤后的数据就可以快速得到微生物群体中的物种组成。</p>\n<p>MetaPhlAn调用Bowtie2比对，可以输入多种格式fasta、fastq、bowtie2out、sam等。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">metaphlan --input_type fastq --nproc <span class=\"number\">12</span> --bowtie2out metagenome.bowtie2.bz2 reads_filter.<span class=\"number\">1</span>.fastq.gz,reads_filter.<span class=\"number\">2</span>.fastq.gz -o SRS011243_abundance_table.txt</span><br></pre></td></tr></table></figure>\n\n<p>结果导出的表格分为两列，第一列为物种分类，按照层级从大到小排列。第二列是物种的相对丰度，每一层级加起来都是100%，有些软件输出的则是reads数目。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/4375.png\" alt=\"4375\" style=\"zoom:50%;\" />\n\n<p><em><strong>DB：/data/Food/primary/R0987_nextgen/Erkang.Zhang/20221130_course/course_4_meta/metaphlan_database/</strong></em></p>\n<h4 id=\"HUMAnN\"><a href=\"#HUMAnN\" class=\"headerlink\" title=\"HUMAnN\"></a>HUMAnN</h4><p>HUMAnN不仅可以通过调用MetaPhlAn完成物种组成部分还可以准确地获得微生物代谢途径和功能模块信息。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">humann --input-<span class=\"keyword\">format</span> fastq --input reads_filter.<span class=\"number\">1</span>.fastq.gz --input reads_filter.<span class=\"number\">2</span>.fastq.gz --output result --threads <span class=\"number\">12</span> --search-mode uniref9<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>结果会输出三个文件。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/452415.png\" alt=\"452415\" style=\"zoom:67%;\" />\n\n<ol>\n<li>基因家族文件（genefamilies）：群体中每个基因家族的丰度。基因家族是一组进化上相关的编码蛋白质序列，通常具有相似的功能。基因家族的丰度采用RPK表示（每kb的reads中该基因家族的含量），以此来标准化不同长度的基因家族的丰度。</li>\n<li>通路丰度文件（pathabundance）：代表群体中通路的丰度。</li>\n<li>通路覆盖文件（pathcoverage）</li>\n</ol>\n<p>另外，HUMAnM还支持比对到其他蛋白数据库的注释结果，以及对RPK的标准化/归一化处理，<a href=\"https://zhuanlan.zhihu.com/p/240910229\">见该网站</a>。</p>\n<p><em><strong>DB：/data/Food/primary/R0987_nextgen/Erkang.Zhang/20221130_course/course_4_meta/humann_database/</strong></em></p>\n<h3 id=\"最终结果的可视化\"><a href=\"#最终结果的可视化\" class=\"headerlink\" title=\"最终结果的可视化\"></a>最终结果的可视化</h3><h4 id=\"Pavian可视化\"><a href=\"#Pavian可视化\" class=\"headerlink\" title=\"Pavian可视化\"></a>Pavian可视化</h4><p>Pavian是一款R包，<a href=\"https://fbreitwieser.shinyapps.io/pavian/\">但也有网页形式</a>。可以用来可视化Kraken、MetaPhlAn、Centrifuge等软件的结果。如果要可视化Centrifuge的结果，需要先将其转化为Kraken的结果格式。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">centrifuge-kreport -<span class=\"keyword\">x</span> centrifuge_p/p_compressed result_log.tsv &gt;kraken_result_log.tsv</span><br></pre></td></tr></table></figure>\n\n<p>然后将其上传到网页上即可，可以绘制桑基图等。</p>\n<h4 id=\"Megan-可视化\"><a href=\"#Megan-可视化\" class=\"headerlink\" title=\"Megan 可视化\"></a>Megan 可视化</h4><p>Megan是一款综合性的微生物物种分类工具，除了支持物种分类还支持功能分析（KEGG数据库使用的是免费版本，付费版Megan可以使用全数据库）。支持多种格式输入，diamond比对的daa格式、blast比对格式、sam、biom等等。也可以用最简单的tsv、csv，两列即可，第一列物种名称、第二列物种丰度信息或reads数目。</p>\n<h4 id=\"GraPhlAn\"><a href=\"#GraPhlAn\" class=\"headerlink\" title=\"GraPhlAn\"></a>GraPhlAn</h4><p>也在Biobakery中，输入MetaPhlAn的结果可以直接绘制。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>现在的宏基因组分析流程基本都是<strong>先拼接生成Contig</strong>再继续分析物种、基因。</li>\n</ul>\n","categories":["2023"],"tags":["生信软件学习笔记"]},{"title":"基因组序列比对原理及软件","url":"/2023/01/18/%E5%9F%BA%E5%9B%A0%E5%BA%8F%E5%88%97%E6%AF%94%E5%AF%B9/","content":"<h1 id=\"基因组序列比对原理及软件\"><a href=\"#基因组序列比对原理及软件\" class=\"headerlink\" title=\"基因组序列比对原理及软件\"></a>基因组序列比对原理及软件</h1><p>进行基因的序列比对首先要了解两个概念：</p>\n<ul>\n<li>同源（homology）：两段序列来自于同一个祖先，在后来进化的分化过程中慢慢地各自发生了一些替换或者插入缺失突变，也就是说两段序列不再完全精确的相同。</li>\n<li>相似（similarity）：单纯地指两段序列碱基排序相同，但不具有生物学意义。</li>\n</ul>\n<p><em><strong>同源的序列一定是相似的，但相似的序列不一定是同源的。</strong></em></p>\n<p><em><strong>如果能事先确定两条序列的同源性再决定是否比对，这样得到的结果会更有意义。</strong></em></p>\n<p>序列比对软件算法分支：</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/dshfuk.png\" alt=\"dshfuk\" style=\"zoom: 50%;\" />\n\n<h2 id=\"局部比对\"><a href=\"#局部比对\" class=\"headerlink\" title=\"局部比对\"></a>局部比对</h2><p>两条亲缘关系较远的核酸序列可能只在一些片段上相似，局部比对就可以找到这些局部相似的片段。局部比对允许两条序列不必完整的找到最佳比对方式，只需要使用序列中的某些部分获得最佳匹配得分即可。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/7836591.png\" alt=\"7836591\" style=\"zoom: 50%;\" />\n\n<p><em><strong>局部比对算法更关注于两条序列的相同点，也就是说我们在寻找两条序列的相似性时通常使用局部比对算法（物种分类、基因注释）。</strong></em></p>\n<h3 id=\"Blast\"><a href=\"#Blast\" class=\"headerlink\" title=\"Blast\"></a>Blast</h3><p>使用的就是局部比对算法，可以在线比对。常用的功能如下：</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/948578.png\" alt=\"948578\" style=\"zoom: 50%;\" />\n\n<p>Blast比对最主要的应用就是物种鉴定和基因功能注释。</p>\n<h4 id=\"物种鉴定\"><a href=\"#物种鉴定\" class=\"headerlink\" title=\"物种鉴定\"></a>物种鉴定</h4><p>拿到一条未知的序列可以直接前往nt库或者nr进行比对来鉴定。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数据库写前缀就可以</span></span><br><span class=\"line\">blastn -db database/nt -query test.fasta -out blastn.out -outfmt <span class=\"number\">6</span> -evalue <span class=\"number\">1</span>e-<span class=\"number\">5</span> -num_threads <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基因功能注释\"><a href=\"#基因功能注释\" class=\"headerlink\" title=\"基因功能注释\"></a>基因功能注释</h4><p>原理也是通过比对已知的序列信息来得到未知的序列中可能包含的信息。所以可以看出比对时所使用的数据库很重要，如果数据库有错误那么比对的结果就也会出错。一般使用nr、COG等数据库。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">blastx -db database/nr -query gene.fa -out blastx.out</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Diamond\"><a href=\"#Diamond\" class=\"headerlink\" title=\"Diamond\"></a>Diamond</h3><p>与blast类似，diamond也是应用于序列比对方面的工具，比对完成之后可以直接导入megan软件进行物种分类以及数据可视化。相比较于blast，diamond的运行速度更快但是只能进行氨基酸水平的比对，不能进行核酸水平的比对。</p>\n<p><em><strong>要注意diamond库与diamond软件的匹配。</strong></em></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#diamond物种鉴定</span></span><br><span class=\"line\">diamond blastx -<span class=\"keyword\">q</span> test.fastq --db database/nr -o test -p <span class=\"number\">12</span> -f <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"comment\">#利用blastp比对两条氨基酸序列</span></span><br><span class=\"line\">diamond makedb --in ref.faa --db <span class=\"keyword\">ref</span></span><br><span class=\"line\">diamond blastp -<span class=\"keyword\">q</span> query.faa -d <span class=\"keyword\">ref</span> -o blastp.txt -p <span class=\"number\">12</span> -f <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局比对\"><a href=\"#全局比对\" class=\"headerlink\" title=\"全局比对\"></a>全局比对</h2><p>衡量两条序列的整体相似性，不关注于局部。全局比对尝试获得两条完整序列之间的最佳比对。</p>\n<p>全局比对主要用于比较两个基因组之间的同源性，绘制共线性图等等，也常用于基因组结构变异的检测。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/74365.png\" alt=\"74365\" style=\"zoom: 50%;\" />\n\n<p><em><strong>全局比对更加关注于找到两条序列的差异，所以在比较两条序列的差异时我们常使用全局比对。</strong></em></p>\n<h3 id=\"Mummer（Maximal-Unique-Matcher）\"><a href=\"#Mummer（Maximal-Unique-Matcher）\" class=\"headerlink\" title=\"Mummer（Maximal Unique Matcher）\"></a>Mummer（Maximal Unique Matcher）</h3><p>全局比对软件。该软件集合了一系列功能，例如基因组比对、共线性分析、同源序列查找等。</p>\n<h4 id=\"比对\"><a href=\"#比对\" class=\"headerlink\" title=\"比对\"></a>比对</h4><figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#比对</span></span><br><span class=\"line\">nucmer ref.fna qd23.fna</span><br><span class=\"line\"><span class=\"comment\">#过滤delta结果</span></span><br><span class=\"line\">delta-filter -<span class=\"number\">1</span> -<span class=\"keyword\">q</span> -r out.delta &gt;out.filter</span><br></pre></td></tr></table></figure>\n\n<p>-q -r参数分别表示仅保留query或者ref上的最佳位置，允许多条ref或者query在另一条上堆叠。-1 则表示取两者的交集（好像得到的结果和-q -r同时输入结果一样）。如下图，-q则保留左2，-r保留右3。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/shighi.png\" alt=\"shighi\" style=\"zoom: 67%;\" />\n\n<h4 id=\"显示比对差异\"><a href=\"#显示比对差异\" class=\"headerlink\" title=\"显示比对差异\"></a>显示比对差异</h4><figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#显示比对结果 需要给出两条序列在文件中的编号</span></span><br><span class=\"line\"><span class=\"keyword\">grep</span> <span class=\"string\">&quot;&gt;&quot;</span> out.filter</span><br><span class=\"line\">show-aligns out.filter NC_016846.<span class=\"number\">1</span> contig_1_pilon</span><br><span class=\"line\"><span class=\"comment\">#显示差异(分别以q和r为准)</span></span><br><span class=\"line\">show-diff out.filter -<span class=\"keyword\">q</span></span><br><span class=\"line\">show-diff out.filter -r</span><br><span class=\"line\"><span class=\"comment\">#显示突变位点</span></span><br><span class=\"line\">show-snps -C -H -I -T -r -<span class=\"number\">1</span> out.filter &gt;out.snp</span><br><span class=\"line\"><span class=\"comment\">#显示变异坐标</span></span><br><span class=\"line\">show-coords out.filter -r &gt;out.coords</span><br><span class=\"line\"><span class=\"comment\">#mummerplot绘图(共线性结果图)</span></span><br><span class=\"line\">mummerplot -p p1 out.filter --png</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测序数据比对\"><a href=\"#测序数据比对\" class=\"headerlink\" title=\"测序数据比对\"></a>测序数据比对</h2><p>高通量的测序数据分析一般有两条途径，一条就是将reads拼接得到相对较长的序列，另一条是不经过拼接直接与参考序列比对。由于拼接基因组会消耗较多的计算资源，目前很多分析都是直接使用测序数据比对的方式来分析数据。</p>\n<p>测序数据比对的意义：</p>\n<ol>\n<li>得到每个位点的细节信息：参考序列上的某个位点是否被覆盖到，有多少reads覆盖。</li>\n</ol>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/dsfhas.png\" alt=\"dsfhas\" style=\"zoom: 33%;\" />\n\n<ol start=\"2\">\n<li>变异检测：比较参考序列与测序样品覆盖位点是否一致，如果不一致那么就有可能是潜在的变异位点。</li>\n</ol>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/sduhfajk.png\" alt=\"sduhfajk\" style=\"zoom: 33%;\" />\n\n<ol start=\"3\">\n<li><p>基因表达量计算：将RNAseq测序数据与参考序列进行比较。如两个相同长度的基因A和B，在相同实验测序深度的情况下，A的基因覆盖度100X而B只有50X，则两者基因表达差异为2倍，A基因为高表达。</p>\n</li>\n<li><p>计算覆盖深度：根据计算每个位点比对上的reads数目可以得到覆盖深度。将全部比对数据除以基因组总长就可以平均覆盖深度。如人基因组中某个染色体的基因覆盖深度出奇的高那么就有可能具有某种染色体疾病（21三体综合症）。</p>\n</li>\n<li><p>计算覆盖比例：将参考序列被reads覆盖的位点除以位点总数，即可得到覆盖比例。覆盖比例越高证明两者之间的亲缘关系越近。</p>\n</li>\n<li><p>计算reads利用率：将比对上的reads数除以总reads数。利用率越高说明测序错误越少，样品与参考基因之间的亲缘关系越近。</p>\n</li>\n<li><p>组装结果纠错：reads与拼接结果比对就是纠错，reads与参考序列比对就是找突变位点。</p>\n</li>\n<li><p>微生物鉴定：得到测序数据后可以不经过拼接直接与物种分类数据库进行比对用于鉴定微生物。</p>\n</li>\n<li><p>基因组成环鉴定：如果测序数据可以比对上基因组的首尾两端，则认为基因组成环，成环是细菌基因组是否为完成图的重要标志。</p>\n</li>\n<li><p>reads之间的overlap关系：三代测序reads与reads之间直接进行比对就可以得到reads之间的overlap关系，用于基因组的拼接。</p>\n</li>\n</ol>\n<h3 id=\"短序列比对（二代测序）\"><a href=\"#短序列比对（二代测序）\" class=\"headerlink\" title=\"短序列比对（二代测序）\"></a>短序列比对（二代测序）</h3><p>短序列比对的特点：</p>\n<ol>\n<li>比对结果是整条比对得上或者比对不上，不能像blast一样分开比对</li>\n<li>比对仅能允许一定数目的错配和空位</li>\n<li>序列太短，会出现一条序列比对到多个位置的情况</li>\n<li>数据量较大时比对比较耗时</li>\n</ol>\n<p>比对结果（pair end）：</p>\n<ul>\n<li>reads比对不上</li>\n<li>reads比对上<ul>\n<li>单个比对上（或者两者比对上的位置不在正常的insert size 下）</li>\n<li>双端都能比对上<ul>\n<li>一对一，无错配</li>\n<li>一对一，有错配</li>\n<li>一对多，无错配</li>\n<li>一对多，有错配</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"bwa（bwa-mem2）比对\"><a href=\"#bwa（bwa-mem2）比对\" class=\"headerlink\" title=\"bwa（bwa-mem2）比对\"></a>bwa（bwa-mem2）比对</h4><figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#参考序列建立索引</span></span><br><span class=\"line\">bwa <span class=\"keyword\">index</span> ref.fa</span><br><span class=\"line\"><span class=\"comment\">#bwa比对</span></span><br><span class=\"line\">bwa mem ref.fa illumina_1.fastq.gz illumina_2.fastq.gz &gt;test.sam</span><br><span class=\"line\"><span class=\"comment\">#sam转bam</span></span><br><span class=\"line\">samtools <span class=\"keyword\">sort</span> -O bam -o test.sorted.bam test.sam </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"长序列比对（三代测序）\"><a href=\"#长序列比对（三代测序）\" class=\"headerlink\" title=\"长序列比对（三代测序）\"></a>长序列比对（三代测序）</h3><p>随着三代测序技术的发展，目前已经开发出多款适用于三代测序数据的比对软件，如minimap2等。</p>\n<h4 id=\"Minimap2\"><a href=\"#Minimap2\" class=\"headerlink\" title=\"Minimap2\"></a>Minimap2</h4><figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#minimap2建立索引</span></span><br><span class=\"line\">minimap2 ref.fa -d ref.min</span><br><span class=\"line\"><span class=\"comment\">#nanopore数据比对</span></span><br><span class=\"line\">minimap2 -ax <span class=\"keyword\">map</span>-ont ref.fa ../nanopore.fastq.gz -t <span class=\"number\">12</span> -o test.nano.sam</span><br><span class=\"line\"><span class=\"comment\">#pacbio数据比对</span></span><br><span class=\"line\">minimap2 -ax <span class=\"keyword\">map</span>-pb ref.fa ../pacbio.fastq.gz -t <span class=\"number\">12</span> -o test.pac.sam</span><br><span class=\"line\"><span class=\"comment\">#reads直接比对找overlap</span></span><br><span class=\"line\">minimap2 -<span class=\"keyword\">x</span> ava-ont ../nanopore.fastq.gz ../nanopore.fastq.gz &gt;overlap.paf</span><br></pre></td></tr></table></figure>\n\n<p>有一个<a href=\"https://tom-poorten.shinyapps.io/dotplotly_shiny/\">在线网站</a>可以查看paf文件。<a href=\"https://github.com/lh3/miniasm/blob/master/PAF.md\">paf文件介绍网站</a>。</p>\n","categories":["2023"],"tags":["生信软件学习笔记"]},{"title":"Unix 操作系统入门","url":"/2022/12/01/Unix_intro/","content":"<h1 id=\"Unix-操作系统入门\"><a href=\"#Unix-操作系统入门\" class=\"headerlink\" title=\"Unix 操作系统入门\"></a>Unix 操作系统入门</h1><p>本笔记主要是整理梳理学习Unix基本操作的心得。</p>\n<h2 id=\"基本概念与操作\"><a href=\"#基本概念与操作\" class=\"headerlink\" title=\"基本概念与操作\"></a>基本概念与操作</h2><ul>\n<li>mac电脑可以直接在终端上操作</li>\n<li>基本的概念和其他的语言差不多，都是函数加上参数</li>\n<li>要注意当前工作的路径</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>date</code></td>\n<td align=\"center\">输出目前的时间</td>\n</tr>\n<tr>\n<td align=\"center\"><code>head</code></td>\n<td align=\"center\">输出目标文件的前几行，可以通过设定参数改变输出的数量</td>\n</tr>\n<tr>\n<td align=\"center\"><code>pwd</code></td>\n<td align=\"center\">输出目前的工作路径</td>\n</tr>\n<tr>\n<td align=\"center\"><code>ls</code></td>\n<td align=\"center\">输出目前文件夹下的文件名称</td>\n</tr>\n<tr>\n<td align=\"center\"><code>cd</code></td>\n<td align=\"center\">改变工作路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"对于文件的基本操作\"><a href=\"#对于文件的基本操作\" class=\"headerlink\" title=\"对于文件的基本操作\"></a>对于文件的基本操作</h2><ul>\n<li><p><code>head</code> <code>tail</code> <code>less</code> 三个命令可以快速查看文件</p>\n</li>\n<li><p>复制、创建、移动文件会覆盖掉重名的文件，一定要注意</p>\n<ul>\n<li><p><code>cp</code> 第一个参数是想要复制的文件名，第二个参数是复制后的路径以及新文件名称，默认复制到当前文件夹下</p>\n</li>\n<li><p>如果想要将其他地方的文件复制到本工作路径下，并保留原始的名称，用点代替即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp experiment/notes.txt . </span><br></pre></td></tr></table></figure></li>\n<li><p><code>mv</code> 指令也差不多，但也可以用来改名字</p>\n</li>\n</ul>\n</li>\n<li><p><code>nano</code> 命令可以创建文件，并打开编辑窗口，需要给出新文件名字</p>\n</li>\n<li><p><code>mkdir</code> <code>rmdir</code> 可以创建或者删除文件夹，如果文件夹不为空会报错</p>\n</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>tail</code></td>\n<td align=\"center\">输出文件最后几行</td>\n</tr>\n<tr>\n<td align=\"center\"><code>less</code></td>\n<td align=\"center\">允许我们浏览文件（q键退出）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>wc</code></td>\n<td align=\"center\">输出文件中的行数、字数、字符数</td>\n</tr>\n<tr>\n<td align=\"center\"><code>cp</code></td>\n<td align=\"center\">复制目标文件或文件夹（-r可以复制文件夹）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>mv</code></td>\n<td align=\"center\">移动目标文件或文件夹</td>\n</tr>\n<tr>\n<td align=\"center\"><code>rm</code></td>\n<td align=\"center\">删除目标文件或文件夹</td>\n</tr>\n<tr>\n<td align=\"center\"><code>mkdir</code></td>\n<td align=\"center\">创建新的文件夹</td>\n</tr>\n<tr>\n<td align=\"center\"><code>rmdir</code></td>\n<td align=\"center\">删除<strong>空</strong>文件夹</td>\n</tr>\n<tr>\n<td align=\"center\"><code>nano</code></td>\n<td align=\"center\">创建或者编辑纯文本文件</td>\n</tr>\n</tbody></table>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">代表含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>.</code></td>\n<td align=\"center\">代表目前的工作路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"重定向符和通配符\"><a href=\"#重定向符和通配符\" class=\"headerlink\" title=\"重定向符和通配符\"></a>重定向符和通配符</h2><ul>\n<li>重定向符 <code>|</code> 是将上一个的结果作为输入输入到下一个命令中</li>\n<li><code>*</code> 和<code>?</code> 的区别，第一个允许字符出现无数次，而第二个只允许出现一次</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th align=\"center\">字符</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>｜</code></td>\n<td align=\"center\">连接不同命令</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;</code></td>\n<td align=\"center\">将输出结果导出到一个文件（会覆盖）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&gt;&gt;</code></td>\n<td align=\"center\">将输出结果导出到一个文件（会增加而不是覆盖）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">可以代表出现任意次数的任意字符</td>\n</tr>\n<tr>\n<td align=\"center\"><code>？</code></td>\n<td align=\"center\">代表只出现一次的任意字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"六个重要指令\"><a href=\"#六个重要指令\" class=\"headerlink\" title=\"六个重要指令\"></a>六个重要指令</h2><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>cut</code></td>\n<td align=\"center\">可以从表格中选取列</td>\n</tr>\n<tr>\n<td align=\"center\"><code>grep</code></td>\n<td align=\"center\">寻找符合的文本并返回整行内容</td>\n</tr>\n<tr>\n<td align=\"center\"><code>paste</code></td>\n<td align=\"center\">将不同的列或者文档横向连接起来</td>\n</tr>\n<tr>\n<td align=\"center\"><code>sed</code></td>\n<td align=\"center\">寻找并替换</td>\n</tr>\n<tr>\n<td align=\"center\"><code>awk</code></td>\n<td align=\"center\">用于筛选和计算（例如某列中大于某数）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>tr</code></td>\n<td align=\"center\">将制定字符替换为其他字符</td>\n</tr>\n</tbody></table>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><ul>\n<li>可以用<code>cat</code> 提取出文件中的所用元素，而不用一个个赋值</li>\n<li><code>echo</code> 指输出所有结果</li>\n</ul>\n","categories":["2022"],"tags":["生信软件学习笔记"]},{"title":"二代、三代测序软件及分析流程整理","url":"/2022/12/09/%E5%9F%BA%E5%9B%A0%E6%B5%8B%E5%BA%8F%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6%E5%8F%8A%E6%B5%81%E7%A8%8B%EF%BC%88%E9%9D%9Emeta%EF%BC%89/","content":"<h1 id=\"二代、三代测序软件及分析流程整理\"><a href=\"#二代、三代测序软件及分析流程整理\" class=\"headerlink\" title=\"二代、三代测序软件及分析流程整理\"></a>二代、三代测序软件及分析流程整理</h1><h2 id=\"二代测序拼接软件\"><a href=\"#二代测序拼接软件\" class=\"headerlink\" title=\"二代测序拼接软件\"></a>二代测序拼接软件</h2><h3 id=\"SPAdes\"><a href=\"#SPAdes\" class=\"headerlink\" title=\"SPAdes\"></a>SPAdes</h3><p>该软件是最常用的二代测序拼接软件。速度虽然没有soapdenovo快，但是结果似乎更加可靠，并且考虑到SOAPdenovo多年没有更新，SPAdes应该为首选。</p>\n<p>另外，SPAdes 软件不仅支持 illumina 测序数据，还可用于Ion Torrent测序数据，PacBio测序数据、sanger 数据，Nanopore数据。并且可以加入其它拼接结果以作为辅助拼接（Hybrid）。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">spades.py -<span class=\"number\">1</span> illumina_ninanjie_1_clean.fastq.gz -<span class=\"number\">2</span> illumina_ninanjie_2_clean.fastq.gz -o spades_illumina -t <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SOAPdenovo\"><a href=\"#SOAPdenovo\" class=\"headerlink\" title=\"SOAPdenovo\"></a>SOAPdenovo</h3><p>SOAPdenovo 是由华大基因开发的 SOAP 软件包的一部分，主要用于短序列 reads 拼接，尤其是 illumina 测序数据。但已长时间无人维护。</p>\n<h2 id=\"二代测序流程\"><a href=\"#二代测序流程\" class=\"headerlink\" title=\"二代测序流程\"></a>二代测序流程</h2><ol>\n<li>获取测序数据</li>\n<li>fastqc 质控</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastqc -f fastq -o illumina_qc/ illumina_ninanjie_1.fastq.gz illumina_ninanjie_2.fastq.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>fastp去除质量不好的位点</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastp -i ../illumina_ninanjie_1.fastq.gz -o ../illumina_ninanjie_1_clean.fastq.gz -I ../illumina_ninanjie_2.fastq.gz -O ../illumina_ninanjie_2_clean.fastq.gz -z <span class=\"number\">4</span> -<span class=\"keyword\">q</span> <span class=\"number\">20</span> -u <span class=\"number\">30</span> -n <span class=\"number\">10</span> -f <span class=\"number\">20</span> -t <span class=\"number\">10</span> -F <span class=\"number\">20</span> -T <span class=\"number\">10</span> -h clean.html</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>再次fastqc质控得到clean的数据</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastqc -f fastq -o illumina_clean_qc/ illumina_ninanjie_1_clean.fastq.gz illumina_ninanjie_2_clean.fastq.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>使用二代测序拼接软件对clean数据进行拼接</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">spades.py -<span class=\"number\">1</span> illumina_ninanjie_1_clean.fastq.gz -<span class=\"number\">2</span> illumina_ninanjie_2_clean.fastq.gz -o spades_illumina -t <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>纠错</li>\n</ol>\n<h2 id=\"三代测序拼接软件\"><a href=\"#三代测序拼接软件\" class=\"headerlink\" title=\"三代测序拼接软件\"></a>三代测序拼接软件</h2><h3 id=\"flye（适合Pacbio和Nanopore）\"><a href=\"#flye（适合Pacbio和Nanopore）\" class=\"headerlink\" title=\"flye（适合Pacbio和Nanopore）\"></a>flye（适合Pacbio和Nanopore）</h3><p>flye 原来叫做abruijn，是一款适合单分子测序的拼接软件，适合处理Pacbio与Nanopore数据。flye 适合拼接多种数据集，从小的细菌基因组到很大的哺乳动物基因组都可以完成。</p>\n<p>flye 其实是一个完整的拼接流程，原始测序数据作为输入，最后就可以直接输出经过纠错校正的基因组序列，同时，flye 也有一个独立的模块可以用来拼接宏基因组。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">flye --nano-raw nanopore_ninanjie.fastq.gz -g <span class=\"number\">120</span>m -t <span class=\"number\">12</span> -o flye_nano</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"canu（适合Pacbio和Nanopore）\"><a href=\"#canu（适合Pacbio和Nanopore）\" class=\"headerlink\" title=\"canu（适合Pacbio和Nanopore）\"></a>canu（适合Pacbio和Nanopore）</h3><p>canu 是一款三代测序数据拼接软件，适用于 Pacbio 与 Nanopore 测序数据。canu 软件其实具有悠久的历史，虽然只发表于 2017 年，但其源于著名的 Celera Assembler。Celera Assembler 主要用于一代测序，现在已不再更新。canu 延续了Celera Assembler工具的组装原理，专门用于三代长读长以及错误率较高的测序的结果组装。canu软件缺点是非常消耗资源，拼接比较耗时，默认会使用所有 CPU。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">canu -d canu -p canu genomeSize=<span class=\"number\">5.4</span>m maxThreads=<span class=\"number\">24</span> -nanopore-raw ../data/clean.filtlong.fq.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wtdbg2（适合Pacbio和Nanopore）\"><a href=\"#wtdbg2（适合Pacbio和Nanopore）\" class=\"headerlink\" title=\"wtdbg2（适合Pacbio和Nanopore）\"></a>wtdbg2（适合Pacbio和Nanopore）</h3><p>wtdbg2是阮珏写的另外一个拼接软件，可以用于 PacBio 或Nanopore的数据拼接，该软件无需纠错直接进行拼接，然后生成一致性序列。wtdbg2运行速度比 canu 和 falcon 都要快很多。能够拼接人全基因组序列，甚至是32Gb的蝾螈基因组。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">wtdbg2.pl -t <span class=\"number\">12</span> -<span class=\"keyword\">x</span> ont -g <span class=\"number\">5.4</span>m -o wtdbg2 ../data/clean.filtlong.fq.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三代测序流程\"><a href=\"#三代测序流程\" class=\"headerlink\" title=\"三代测序流程\"></a>三代测序流程</h2><ol>\n<li>获取测序数据</li>\n<li>质控（Nanopore使用nanoplot进行质控）</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">NanoPlot --fastq nanopore.fastq.gz -o nanoplot</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>过滤数据</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">filtlong --min_length <span class=\"number\">2000</span> --min_mean_q <span class=\"number\">90</span> nanopore.fastq.gz | gzip &gt;clean.filtlong.fq.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>再质控</li>\n</ol>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">NanoPlot --fastq clean.filtlong.fq.gz -o nanoplot_clean</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>使用三代测序软件进行拼接（flye、canu、wtbdg2等）</li>\n<li>纠错</li>\n</ol>\n<h2 id=\"拼接结果优化\"><a href=\"#拼接结果优化\" class=\"headerlink\" title=\"拼接结果优化\"></a>拼接结果优化</h2><p>拼接结果优化，也就是纠错（polishing）。</p>\n<h3 id=\"Medeka\"><a href=\"#Medeka\" class=\"headerlink\" title=\"Medeka\"></a>Medeka</h3><p>Medaka是由 Oxford Nanopore 开发的开源软件。<strong>使用时最好创建虚拟环境，否则容易报错。</strong></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入虚拟环境运行</span></span><br><span class=\"line\">conda activate medaka</span><br><span class=\"line\"><span class=\"comment\">#运行软件</span></span><br><span class=\"line\">READ=../data/nanopore.sra.fastq.gz</span><br><span class=\"line\">medaka_consensus -i $READ -d assembly.fasta -o medaka_result -m r941_min_high_g36<span class=\"number\">0</span> -v medaka.vcf -t <span class=\"number\">24</span> &gt;medaka.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pilon\"><a href=\"#Pilon\" class=\"headerlink\" title=\"Pilon\"></a>Pilon</h3><p>Pilon 是由 broadinstitute 研究所开发的纠错工具，输入拼接结果（三代）以及原始测序数据（二代）比对到拼接结果（三代）的bam 文件即可。 输入的 bam 可以来自于二代测序数据的比对，也可以来自于三代测序数据比对得到的 bam，注意bam 文件需要排序并建立索引。<strong>并且Pilon在使用时要注意java使用的内存空间，修改Pilon.jar来增加上限，否则报错。</strong></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#bwa建立索引</span></span><br><span class=\"line\">bwa <span class=\"keyword\">index</span> medaka.fasta</span><br><span class=\"line\"><span class=\"comment\">#使用bwa mem和illumina的测序结果比对得到sam文件</span></span><br><span class=\"line\">READ1=<span class=\"regexp\">/ifs1/</span>TestDatas/nanopore7/data/MGH78578/illumina.sra_1.fastq.gz READ2=<span class=\"regexp\">/ifs1/</span>TestDatas/nanopore7/data/MGH78578/illumina.sra_2.fastq.gz</span><br><span class=\"line\">bwa mem -t <span class=\"number\">4</span> -R <span class=\"string\">&#x27;@RG\\tID:foo\\tSM:bar:\\tPL:ILLUMINA&#x27;</span> medaka.fasta $READ1 $READ2 &gt;illumina.sam</span><br><span class=\"line\"><span class=\"comment\">#samtools排序并建立索引且转化为bam格式节省空间</span></span><br><span class=\"line\">samtools <span class=\"keyword\">sort</span> -@ <span class=\"number\">4</span> -O bam -o illumina.sorted.bam illumina.sam</span><br><span class=\"line\">samtools <span class=\"keyword\">index</span> illumina.sorted.bam</span><br><span class=\"line\"><span class=\"comment\">#Pilon</span></span><br><span class=\"line\">java -Xmx32G -jar /ifs1/Software/biosoft/pilon/pilon-<span class=\"number\">1.23</span>.jar --genome medaka.fasta --fix all --changes --frags illumina.sorted.bam --output pilon</span><br><span class=\"line\">--outdir pilon_result --threads <span class=\"number\">24</span> --vcf <span class=\"number\">2</span>&gt; pilon.log</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Racon\"><a href=\"#Racon\" class=\"headerlink\" title=\"Racon\"></a>Racon</h3><p>Racon 是基于 minimap 和 miniasm 构建一致性序列(consensus)的一款软件，也可以用于纠错。既可以用于三代数据也可以用于二代数据。输入数据需要三个，首先是 contig，然后是测序的 reads，以及前面二者比对的结果，这个比对结果是 MHAP， PAF，SAM 三种格式当中的一种即可。数据结果为纠错后的 contig 序列。 Racon 纠错一般都会进行多轮。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接原始拼接结果</span></span><br><span class=\"line\">DRAFT=../pilon/pilon_result/pilon.fasta READ=<span class=\"regexp\">/ifs1/</span>TestDatas/nanopore7/data/MGH78578/clean.filtlong.fq.gz</span><br><span class=\"line\"><span class=\"comment\">#minimap2 比对(bwa比对也可以)</span></span><br><span class=\"line\">minimap2 -t <span class=\"number\">4</span> $&#123;DRAFT&#125; $&#123;READ&#125; &gt; round_1.paf</span><br><span class=\"line\"><span class=\"comment\">#racon 进行纠错</span></span><br><span class=\"line\">racon -t <span class=\"number\">4</span> $&#123;READ&#125; round_1.paf $&#123;DRAFT&#125; &gt; racon_round1.fasta</span><br><span class=\"line\"><span class=\"comment\">#第二轮纠错</span></span><br><span class=\"line\">minimap2 -t <span class=\"number\">4</span> racon_round1.fasta $&#123;READ&#125; &gt; round_2.paf</span><br><span class=\"line\">racon -t <span class=\"number\">4</span> $&#123;READ&#125; round_2.paf racon_round1.fasta&gt; racon_round2.fasta</span><br><span class=\"line\"><span class=\"comment\">#第三轮纠错</span></span><br><span class=\"line\">minimap2 -t <span class=\"number\">4</span> racon_round2.fasta $&#123;READ&#125; &gt; round_3.paf</span><br><span class=\"line\">racon -t <span class=\"number\">4</span> $&#123;READ&#125; round_3.paf racon_round2.fasta&gt; racon_round3.fasta</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h2><ul>\n<li>一定要注意软件使用的范围，比如unicycler就只能拼接比较小的基因组比如细菌完成图</li>\n</ul>\n","categories":["2022"],"tags":["生信软件学习笔记"]},{"title":"宏基因组基因预测及功能注释","url":"/2023/01/16/%E5%AE%8F%E5%9F%BA%E5%9B%A0%E7%BB%84%E5%9F%BA%E5%9B%A0%E9%A2%84%E6%B5%8B%E5%8F%8A%E5%8A%9F%E8%83%BD%E6%B3%A8%E9%87%8A/","content":"<h1 id=\"宏基因组基因预测及功能注释\"><a href=\"#宏基因组基因预测及功能注释\" class=\"headerlink\" title=\"宏基因组基因预测及功能注释\"></a>宏基因组基因预测及功能注释</h1><h2 id=\"基因预测（Predict）\"><a href=\"#基因预测（Predict）\" class=\"headerlink\" title=\"基因预测（Predict）\"></a>基因预测（Predict）</h2><h3 id=\"开放阅读框（Open-reading-frame）\"><a href=\"#开放阅读框（Open-reading-frame）\" class=\"headerlink\" title=\"开放阅读框（Open reading frame）\"></a>开放阅读框（Open reading frame）</h3><p>一个起始密码子到一个终止密码子之间的基因部分就叫做一个开放阅读框。ORF不一定是基因，但基因一定是ORF。</p>\n<p>每一段序列都有6种读取方式（正链3种，负链3种），其中有的属于开放阅读框而有的则不能编码。</p>\n<h3 id=\"Prodigal\"><a href=\"#Prodigal\" class=\"headerlink\" title=\"Prodigal\"></a>Prodigal</h3><p>该软件可以快速预测<strong>原核生物</strong>的基因信息。默认密码子表是第11套（支原体用第4套）。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">prodigal -i test.fa -d test.ffn -a test.faa -o test.gff -f gff</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ffn文件是基因的核酸序列。</p>\n</li>\n<li><p>faa文件是翻译过后的基因氨基酸序列。</p>\n</li>\n<li><p>gff(gene feature file)文件是一种列表格式，记录一段序列起始和结束的位点，表示基因的坐标（sanger定义的一种格式）。</p>\n</li>\n</ul>\n<p><em><strong>通过计算可以发现原核生物基因组中基因所占的部分较高，说明重复序列较少（存储效率高）。</strong></em></p>\n<h3 id=\"Glimmer\"><a href=\"#Glimmer\" class=\"headerlink\" title=\"Glimmer\"></a>Glimmer</h3><p>也可以快速预测原核生物的基因信息，但不如prodigal方便，不能直接输出核酸序列，需要从列表里提取。不建议使用。</p>\n<h2 id=\"基因功能注释（Annotation）\"><a href=\"#基因功能注释（Annotation）\" class=\"headerlink\" title=\"基因功能注释（Annotation）\"></a>基因功能注释（Annotation）</h2><h3 id=\"功能注释数据库\"><a href=\"#功能注释数据库\" class=\"headerlink\" title=\"功能注释数据库\"></a>功能注释数据库</h3><ul>\n<li><p>NR数据库：非冗余的蛋白数据库。已发表的基因转录出的功能蛋白都收录，大而全，但准确性存疑。</p>\n</li>\n<li><p>UniProt：比较精确，其中的蛋白序列都是经过验证的，但数据库较小。</p>\n</li>\n<li><p>Gene Ontology：为了统一相同序列在不同数据库中名称不同而建立的库，使用统一的语言描述功能。</p>\n</li>\n<li><p>CARD数据库</p>\n</li>\n<li><p>KEGG数据库：基因的代谢信息，通路中的基因信息比较丰富。</p>\n</li>\n<li><p>COG数据库</p>\n</li>\n<li><p>CAZy数据库</p>\n</li>\n</ul>\n<h3 id=\"Eggnog-mapper\"><a href=\"#Eggnog-mapper\" class=\"headerlink\" title=\"Eggnog-mapper\"></a>Eggnog-mapper</h3><p>Eggnog-mapper是一个基因功能注释流程，可以自动完成基因的功能注释，其内置了COG、KOG、KEGG、GO、BiGG等数据库（KEGG数据库是免费版本）。调用的是Diamond进行比对。</p>\n<p><em><strong>由于python版本问题，最好在虚拟环境中运行。</strong></em></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"code\"><pre><span class=\"line\">emapper.py -i test.faa --output test.annotation -m diamond</span><br></pre></td></tr></table></figure>\n\n<p>输入数据可以是faa氨基酸序列，也可以输入基因序列，但建议还是输入氨基酸序列。–data_dir还可以指定数据库的位置。</p>\n<p>生成两个文件 .annotations和.seed_orthologs。比较重要的就是第一列和最后一列。</p>\n<img src=\"https://raw.githubusercontent.com/Zhang-EK/blog_img/main/dshfu.png\" alt=\"dshfu\" style=\"zoom:67%;\" />\n\n<p>这个软件也提供一个在线的比对<a href=\"http://eggnog-mapper.embl.de/\">网站</a>。</p>\n","categories":["2023"],"tags":["生信软件学习笔记"]},{"title":"生，死，生死，生活","url":"/2022/04/27/%E7%94%9F%EF%BC%8C%E6%AD%BB%EF%BC%8C%E7%94%9F%E6%AD%BB%EF%BC%8C%E7%94%9F%E6%B4%BB/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"3bf275fe12f2eb252bdd063fafa7507ed72e5047565b1f73d320fb0e3c97ad8e\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["2022"],"tags":["读后感"]},{"title":"这是最好的时代，也是最坏的时代","url":"/2022/02/18/%E8%BF%99%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E6%97%B6%E4%BB%A3%EF%BC%8C%E4%B9%9F%E6%98%AF%E6%9C%80%E5%9D%8F%E7%9A%84%E6%97%B6%E4%BB%A3/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"fa64f6c8c98488b62ca9ee636e04994e8a6a135ad6d3d9deb2526d046c6039f6\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">输入密码，查看文章</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["2022"],"tags":["读后感"]},{"title":"易宏基因组流程","url":"/2022/02/21/%E6%98%93%E5%AE%8F%E5%9F%BA%E5%9B%A0%E7%BB%84%E6%B5%81%E7%A8%8B/","content":"<p>[TOC] </p>\n<h1 id=\"易宏基因组流程EasyMetagenomePipeline\"><a href=\"#易宏基因组流程EasyMetagenomePipeline\" class=\"headerlink\" title=\"易宏基因组流程EasyMetagenomePipeline\"></a>易宏基因组流程EasyMetagenomePipeline</h1><pre><code># 版本: 1.14, 2022/3/25\n# 测试环境为Linux Ubuntu 20.04 / CentOS 7.7\n</code></pre>\n<h1 id=\"一、数据预处理-Data-preprocessing\"><a href=\"#一、数据预处理-Data-preprocessing\" class=\"headerlink\" title=\"一、数据预处理 Data preprocessing\"></a>一、数据预处理 Data preprocessing</h1><h2 id=\"1-1-准备工作-Prepare\"><a href=\"#1-1-准备工作-Prepare\" class=\"headerlink\" title=\"1.1 准备工作 Prepare\"></a>1.1 准备工作 Prepare</h2><ol>\n<li>首次使用请参照<code>0Install.sh</code>脚本，安装软件和数据库(大约1-3天，仅一次)</li>\n<li>易宏基因组(EasyMetagenome)流程<code>1Pipeline.sh</code>复制到项目文件夹，如本次为meta</li>\n<li>项目文件夹准备测序数据(seq/*.fq.gz)和样本元数据(result/metadata.txt)</li>\n</ol>\n<h3 id=\"1-1-1-环境变量设置-每次开始分析前必须运行\"><a href=\"#1-1-1-环境变量设置-每次开始分析前必须运行\" class=\"headerlink\" title=\"1.1.1 环境变量设置(每次开始分析前必须运行)\"></a>1.1.1 环境变量设置(每次开始分析前必须运行)</h3><p>设置数据库、软件和工作目录</p>\n<pre><code># Conda软件software安装目录，`conda env list`命令查看，如~/miniconda3\nsoft=/conda2\n# 公共数据库database(db)位置，如管理员设置/db，个人下载至~/db，并添加其中linux目录中程序至环境变量\ndb=/db\n# 设置工作目录work directory(wd)，如meta\nwd=~/meta\n\n# 添加分析所需的软件、脚本至环境变量，添加至~/.bashrc中自动加载\nPATH=$db/EasyMicrobiome/linux:$db/EasyMicrobiome/script:$PATH\n# 创建并进入工作目录\nmkdir -p $wd &amp;&amp; cd $wd\n\n# 指定某个R语言环境(可选windows下本地运行)\nalias Rscript=&quot;/anaconda2/bin/Rscript --vanilla&quot;\n</code></pre>\n<h3 id=\"1-1-2-起始文件——序列和元数据\"><a href=\"#1-1-2-起始文件——序列和元数据\" class=\"headerlink\" title=\"1.1.2 起始文件——序列和元数据\"></a>1.1.2 起始文件——序列和元数据</h3><pre><code># 创建3个常用子目录：序列，临时文件和结果\nmkdir -p seq temp result\n\n# 上传元数据metadata.txt至result目录，此处下载并重命名\nwget http://210.75.224.110/github/EasyMetagenome/result/metadata2.txt\nmv metadata2.txt result/metadata.txt\n# 检查文件格式，^I为制表符，$为Linux换行，^M$为Windows回车，^M为Mac换行符\ncat -A result/metadata.txt\n# 转换Windows回车为Linux换行\nsed -i &#39;s/\\r//&#39; result/metadata.txt\ncat -A result/metadata.txt\n</code></pre>\n<p>用户使用filezilla上传测序文件至seq目录，本次从其它位置复制，或从网络下载测试数据(多种方法任选其一)</p>\n<pre><code># 方法1. 网络下载测试数据\ncd seq/\nawk &#39;&#123;system(&quot;wget -c http://210.75.224.110/github/EasyMetagenome/seq/&quot;$1&quot;_1.fq.gz&quot;)&#125;&#39; \\\n  &lt;(tail -n+2 ../result/metadata.txt)\nawk &#39;&#123;system(&quot;wget -c http://210.75.224.110/github/EasyMetagenome/seq/&quot;$1&quot;_2.fq.gz&quot;)&#125;&#39; \\\n  &lt;(tail -n+2 ../result/metadata.txt)\ncd ..\n\n# 方法2. 从其它目录复制测序数据\n# cp -rf /db/meta/seq/*.gz seq/\n\n# 查看文件大小\nls -lsh seq\n# -l 列出详细信息 (l: list)\n# -sh 显示人类可读方式文件大小 (s: size; h: human readable)    \n</code></pre>\n<h3 id=\"1-1-3-了解工作目录和文件\"><a href=\"#1-1-3-了解工作目录和文件\" class=\"headerlink\" title=\"1.1.3 了解工作目录和文件\"></a>1.1.3 了解工作目录和文件</h3><p>显示文件结构</p>\n<pre><code># Ubuntu下安装tree命令\n# sudo apt install tree\n# 无法安装请更新软件列表 sudo apt update\ntree -L 2\n# .\n# ├── pipeline.sh\n# ├── result\n# │   └── metadata.txt\n# ├── seq\n# │   ├── C1_1.fq.gz\n# │   ├── C1_2.fq.gz\n# │   ├── N1_1.fq.gz\n# │   └── N1_2.fq.gz\n# └── temp\n</code></pre>\n<ul>\n<li>1pipeline.sh是分析流程代码；</li>\n<li>seq目录中有2个样本Illumina双端测序，4个序列文件；</li>\n<li>temp是临时文件夹，存储分析中间文件，结束可全部删除节约空间</li>\n<li>result是重要节点文件和整理化的分析结果图表，<ul>\n<li>实验设计metadata.txt也在此</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-2-可选-FastQC质量评估\"><a href=\"#1-2-可选-FastQC质量评估\" class=\"headerlink\" title=\"1.2 (可选)FastQC质量评估\"></a>1.2 (可选)FastQC质量评估</h2><pre><code># (可选)使用指定位置的(别人安装的)conda\nsource /home/liuyongxin/miniconda2/bin/activate\n# 启动软件环境\nconda activate meta\n# 第一次使用软件要记录软件版本，文章方法中必须写清楚\nfastqc --version # 0.11.9\n# time统计运行时间，fastqc质量评估\n# *.gz为原始数据，-t指定多线程\ntime fastqc seq/*.gz -t 2\n</code></pre>\n<p>质控报告见<code>seq</code>目录，详细解读请阅读<a href=\"https://mp.weixin.qq.com/s/tDMih7ISLJcL4F4sWBq3Vw\">《数据的质量控制软件——FastQC》</a>。</p>\n<p>multiqc将fastqc的多个报告生成单个整合报告，方法批量查看和比较</p>\n<pre><code># 记录软件版本\nmultiqc --version # 1.8\n# 整理seq目录下fastqc报告，输出multiqc_report.html至result/qc目录\nmultiqc -d seq/ -o result/qc\n</code></pre>\n<p>查看右侧result/qc目录中multiqc_report.html，单击，选择<code>View in Web Browser</code>查看可交互式报告。</p>\n<h2 id=\"1-3-质量控制\"><a href=\"#1-3-质量控制\" class=\"headerlink\" title=\"1.3 质量控制\"></a>1.3 质量控制</h2><pre><code>mkdir -p temp/qc\n</code></pre>\n<h3 id=\"1-3-1-Fastp质量控制环境样品\"><a href=\"#1-3-1-Fastp质量控制环境样品\" class=\"headerlink\" title=\"1.3.1 Fastp质量控制环境样品\"></a>1.3.1 Fastp质量控制环境样品</h3><p>适用于无宿主污染的环境样品，质控速度快，自动识别接头和低质量，详见：<a href=\"http://mp.weixin.qq.com/s/u3U-AJW7oRYTx5h13c19UQ\">极速的FASTQ文件质控+过滤+校正fastp</a></p>\n<pre><code># 单样本质控\ni=C1\nfastp -i seq/$&#123;i&#125;_1.fq.gz -o temp/qc/$&#123;i&#125;_1.fastq -I seq/$&#123;i&#125;_2.fq.gz -O temp/qc/$&#123;i&#125;_2.fastq\n \n# 多样本并行\ntail -n+2 result/metadata.txt|cut -f1|rush -j 2 \\\n  &quot;fastp -i seq/&#123;1&#125;_1.fq.gz -o temp/qc/&#123;1&#125;_1.fastq -I seq/&#123;1&#125;_2.fq.gz -O temp/qc/&#123;1&#125;_2.fastq&quot;\n</code></pre>\n<h3 id=\"1-3-2-KneadData质控和去宿主\"><a href=\"#1-3-2-KneadData质控和去宿主\" class=\"headerlink\" title=\"1.3.2 KneadData质控和去宿主\"></a>1.3.2 KneadData质控和去宿主</h3><p>kneaddata是流程，它主要依赖trimmomatic质控和去接头，bowtie2比对宿主，然后筛选非宿主序列用于下游分析 。</p>\n<p>详细教程和常见问题，阅读：<a href=\"https://mp.weixin.qq.com/s/ovL4TwalqZvwx5qWb5fsYA\">MPB：随机宏基因组测序数据质量控制和去宿主的分析流程和常见问题</a></p>\n<pre><code># 记录核心软件版本\nkneaddata --version # 0.7.4\ntrimmomatic -version # 0.39\nbowtie2 --version # 2.3.5.1\n# 可只选一行中部分代码点击Run，如选中下行中#号后面命令查看程序帮助\n# kneaddata -h # 显示帮助\n</code></pre>\n<p>检查点：zless/zcat查看可压缩文件，检查序列质量格式(质量值大写字母为标准Phred33格式，小写字母为Phred64，需参考附录：质量值转换)；检查双端序列ID是否重复，如果重名需要在质控前改名更正。参考<strong>附录，质控kneaddata，去宿主后双端不匹配——序列改名</strong>。</p>\n<pre><code># 设置某个样本名为变量i，以后再无需修改\ni=C1\n# zless查看压缩文件，空格翻页，按q退出。\nzless seq/$&#123;i&#125;_1.fq.gz | head -n4\n# zcat显示压缩文件，head指定显示行数\nzcat seq/$&#123;i&#125;_2.fq.gz | head -n4\n</code></pre>\n<ul>\n<li>“|” 为管道符，上一个命令的输出，传递给下一个命令做输入</li>\n<li>gzip: stdout: Broken pipe：管道断开。这里是人为断开，不是错误</li>\n<li>运行过程中需要仔细阅读屏幕输出的信息</li>\n</ul>\n<p>如果序列双端名称一致，改名参见下方代码</p>\n<p>(可选) 序列改名，解决NCBI SRA数据双端ID重名问题，详见<a href=\"https://mp.weixin.qq.com/s/ovL4TwalqZvwx5qWb5fsYA\">《MPB：随机宏基因组测序数据质量控制和去宿主的分析流程和常见问题》</a>。</p>\n<pre><code>gunzip seq/*.gz\nsed -i &#39;1~4 s/$/\\\\1/g&#39; seq/*_1.fq\nsed -i &#39;1~4 s/$/\\\\2/g&#39; seq/*_2.fq\n# 再次核对样本是否标签有重复\nhead seq/C2_1.fq\nhead seq/C2_2.fq\n# 结果压缩节省空间\ngzip seq/*.fq\n# pigz是并行版的gzip，没装可使用为gzip\n# pigz seq/*.fq\n</code></pre>\n<h4 id=\"可选-单样品质控\"><a href=\"#可选-单样品质控\" class=\"headerlink\" title=\"(可选)单样品质控\"></a>(可选)单样品质控</h4><p>若一条代码分割在多行显示时，最好全部选中运行，多行分割的代码行末有一个 “\\” 。多行注释命令运行，可全选，按Ctrl+Shift+C进行注释的取消和添加。</p>\n<ul>\n<li>以metadata中<code>C1</code>样品本质控为例</li>\n</ul>\n<ol>\n<li>输入文件：双端FASTQ测序数据，提供给参数-i，seq/${i}_1.fq.gz和 seq/${i}_2.fq.gz</li>\n<li>参考数据库：宿主基因组索引 -db ${db}/kneaddata/human_genome/hg37dec_v0.1</li>\n<li>输出文件：质控后的FASTQ测序数据，在目录temp/qc下面，${i}_1_kneaddata_paired_1.fastq和${i}_1_kneaddata_paired_1.fastq，用于后续分析</li>\n<li>软件位置：<code>conda env list</code>查看软件安装位置，请务必根据自己软件和数据库安装位置，修改软件trimmomatic和接头文件位置。</li>\n</ol>\n<p>(可选)手动设置trimmomatic程序和接头位置</p>\n<pre><code>程序目录：$&#123;soft&#125;/envs/meta/share/trimmomatic/\n# 查看multiqc结果中接头污染最严重的C2_1样本，再到fastqc报告中查看接头序列，复制前20个碱基检索确定接头文件\ngrep &#39;AGATCGGAAGAGCGTCGTGTAGGGAAA&#39; $&#123;soft&#125;/envs/meta/share/trimmomatic/adapters/*\n# 根据实际情况选择单端SE或双端PE，与原序列比较确定为 TruSeq2-PE.fa，目前多为TruSeq3-PE-2.fa，更准确的是问测序公司要接头文件\n</code></pre>\n<p>100万条序列8线程质控和去宿主，耗时~2m。</p>\n<pre><code>i=C1\n# kneaddata位于liuyongxin中的meta环境，基因组名称为Homo_sapiens或hg37dec_v0.1\n# soft=/home/liuyongxin/miniconda2/\nkneaddata -i seq/$&#123;i&#125;_1.fq.gz -i seq/$&#123;i&#125;_2.fq.gz \\\n  -o temp/qc -v -t 8 --remove-intermediate-output \\\n  --trimmomatic $&#123;soft&#125;/envs/meta/share/trimmomatic/ \\\n  --trimmomatic-options &quot;ILLUMINACLIP:$&#123;soft&#125;/envs/meta/share/trimmomatic/adapters/TruSeq2-PE.fa:2:40:15 SLIDINGWINDOW:4:20 MINLEN:50&quot; \\\n  --reorder --bowtie2-options &quot;--very-sensitive --dovetail&quot; \\\n  -db $&#123;db&#125;/kneaddata/human_genome/hg37dec_v0.1\n\n# 查看质控后的结果文件大小，确保不是0\nls -shtr temp/qc/$&#123;i&#125;_1_kneaddata_paired_?.fastq\n</code></pre>\n<h4 id=\"多样品并行质控\"><a href=\"#多样品并行质控\" class=\"headerlink\" title=\"多样品并行质控\"></a>多样品并行质控</h4><p>方法1. rush并行管理：注释修改trimmomatic为绝对路径，即修改/home/liuyongxin/miniconda2为你设置的soft变量完整路径，自己用户安装的soft为~/miniconda3(注：存在单引号的代码内不支持变量)</p>\n<pre><code>tail -n+2 result/metadata.txt|cut -f1|rush -j 2 \\\n  &quot;kneaddata -i seq/&#123;1&#125;_1.fq.gz -i seq/&#123;1&#125;_2.fq.gz \\\n  -o temp/qc -v -t 3 --remove-intermediate-output \\\n  --trimmomatic $soft/envs/meta/share/trimmomatic/ \\\n  --trimmomatic-options &#39;ILLUMINACLIP:/home/liuyongxin/miniconda2/envs/meta/share/trimmomatic/adapters/TruSeq2-PE.fa:2:40:15 SLIDINGWINDOW:4:20 MINLEN:50&#39; \\\n  --reorder --bowtie2-options &#39;--very-sensitive --dovetail&#39; \\\n  -db $&#123;db&#125;/kneaddata/human_genome/hg37dec_v0.1&quot;\n</code></pre>\n<p>(可选)方法2. parallel并行质控和去宿主</p>\n<pre><code># 记录软件版本\nparallel --version # 20160222\n# 打will cite承诺引用并行软件parallel\nparallel --citation \n\n# parallel软件说明和使用实例\n# 根据样本列表`:::`并行处理，并行j=2个任务，每个任务t=3个线程，2~7m\n# 运行下面这行，体会下parallel的工作原理\n# ::: 表示传递参数；第一个::: 后面为第一组参数，对应于&#123;1&#125;;\n# 第二个::: 后面为第二组参数，对应于&#123;2&#125;，依次替换\nparallel -j 3 --xapply &quot;echo &#123;1&#125; &#123;2&#125;&quot; ::: seq/*_1.fq.gz ::: seq/*_2.fq.gz\n# --xapply保持文件成对，否则将为两两组合，显示如下：\nparallel -j 2 &quot;echo &#123;1&#125; &#123;2&#125;&quot; ::: seq/*_1.fq.gz ::: seq/*_2.fq.gz\n# 从文件列表使用\nparallel -j 3 --xapply &quot;echo seq/&#123;1&#125;_1.fq.gz seq/&#123;1&#125;_2.fq.gz&quot; ::: `tail -n+2 result/metadata.txt|cut -f1`\n\n# 单样本运行成功，且参数设置绝对路径。出现错误`Unrecognized option: -d64`参考**附录，质控Kneaddata，Java版本不匹配——重装Java运行环境**。\n# 每步分析产生多个文件时新建子文件夹\n# 每个线程处理百万序列约10分钟，多线程可加速 j x t 倍\n# 注意此处引物文件必须填写绝对路径，否则无法使用\ntime parallel -j 2 --xapply \\\n  &quot;kneaddata -i seq/&#123;1&#125;_1.fq.gz \\\n  -i seq/&#123;1&#125;_2.fq.gz \\\n  -o temp/qc -v -t 3 --remove-intermediate-output \\\n  --trimmomatic /home/liuyongxin/miniconda2/envs/meta/share/trimmomatic/ \\\n  --trimmomatic-options &#39;ILLUMINACLIP:/home/liuyongxin/miniconda2/envs/meta/share/trimmomatic/adapters/TruSeq2-PE.fa:2:40:15 SLIDINGWINDOW:4:20 MINLEN:50&#39; \\\n  --reorder --bowtie2-options &#39;--very-sensitive --dovetail&#39; \\\n  -db $&#123;db&#125;/kneaddata/human_genome/Homo_sapiens&quot; \\\n  ::: `tail -n+2 result/metadata.txt|cut -f1`\n</code></pre>\n<h4 id=\"质控结果改名、临时文件删除和统计\"><a href=\"#质控结果改名、临时文件删除和统计\" class=\"headerlink\" title=\"质控结果改名、临时文件删除和统计\"></a>质控结果改名、临时文件删除和统计</h4><p>大文件清理，高宿主含量样本可节约&gt;90%空间</p>\n<pre><code>rm -rf temp/qc/*contam* temp/qc/*unmatched*  temp/qc/*.fq\nls -l temp/qc/\n</code></pre>\n<p><strong>结果文件链接为新名</strong>：awk的system命令批处理系统命令，s为软链(快捷方式)、f为强制(force)</p>\n<pre><code>awk &#39;&#123;system(&quot;ln -sf `pwd`/temp/qc/&quot;$1&quot;_1_kneaddata_paired_1.fastq temp/qc/&quot;$1&quot;_1.fastq&quot;)&#125;&#39; &lt;(tail -n+2 result/metadata.txt)\nawk &#39;&#123;system(&quot;ln -sf `pwd`/temp/qc/&quot;$1&quot;_1_kneaddata_paired_2.fastq temp/qc/&quot;$1&quot;_2.fastq&quot;)&#125;&#39; &lt;(tail -n+2 result/metadata.txt)\nls -l temp/qc/\n</code></pre>\n<p>质控结果汇总</p>\n<pre><code># 采用kneaddata附属工具kneaddata_read_count_table\nkneaddata_read_count_table --input temp/qc \\\n  --output temp/kneaddata.txt\n# 筛选重点结果列\ncut -f 1,2,4,12,13 temp/kneaddata.txt | sed &#39;s/_1_kneaddata//&#39; &gt; result/qc/sum.txt\ncat result/qc/sum.txt\n\n# 用R代码统计下质控结果，可在本地运行\nRscript -e &quot;data=read.table(&#39;result/qc/sum.txt&#39;, header=T, row.names=1, sep=&#39;\\t&#39;); summary(data)&quot;\n# R转换宽表格为长表格\nRscript -e &quot;library(reshape2); data=read.table(&#39;result/qc/sum.txt&#39;, header=T,row.names=1, sep=&#39;\\t&#39;); write.table(melt(data), file=&#39;result/qc/sum_long.txt&#39;,sep=&#39;\\t&#39;, quote=F, col.names=T, row.names=F)&quot;\ncat result/qc/sum_long.txt\n# 可用 http://www.ehbio.com/ImageGP/ 绘图展示\n</code></pre>\n<h2 id=\"1-4-可选-质控后质量评估\"><a href=\"#1-4-可选-质控后质量评估\" class=\"headerlink\" title=\"1.4 (可选)质控后质量评估\"></a>1.4 (可选)质控后质量评估</h2><p>整理bowtie2, trimmomatic, fastqc报告，接头和PCR污染率一般小于1%。结果见：result/qc/multiqc_report_1.html</p>\n<pre><code># 1-2m\nfastqc temp/qc/*_1_kneaddata_paired_*.fastq -t 2\nmultiqc -d temp/qc/ -o result/qc/\n# v1.7以后开始使用Python3，v1.8+缺少bowtie2比对结果的统计\n</code></pre>\n<h1 id=\"二、基于读长分析-Read-based-HUMAnN2\"><a href=\"#二、基于读长分析-Read-based-HUMAnN2\" class=\"headerlink\" title=\"二、基于读长分析 Read-based (HUMAnN2)\"></a>二、基于读长分析 Read-based (HUMAnN2)</h1><h2 id=\"2-1-准备HUMAnN2输入文件\"><a href=\"#2-1-准备HUMAnN2输入文件\" class=\"headerlink\" title=\"2.1 准备HUMAnN2输入文件\"></a>2.1 准备HUMAnN2输入文件</h2><p>小技巧：循环批量处理样本列表</p>\n<pre><code># 基于样本元数据提取样本列表命令解析\n# 去掉表头\ntail -n+2 result/metadata.txt\n# 提取第一列样本名\ntail -n+2 result/metadata.txt|cut -f1\n# 循环处理样本\nfor i in `tail -n+2 result/metadata.txt|cut -f1`;do echo &quot;Processing &quot;$i; done\n# ` 反引号为键盘左上角Esc键下面的按键，一般在数字1的左边，代表运行命令返回结果\n</code></pre>\n<p>HUMAnN2要求双端序列合并的文件作为输入，for循环根据实验设计样本名批量双端序列合并。<br>注意星号和问号，分别代表多个和单个字符。当然大家更不能溜号~~~行分割的代码行末有一个 \\ </p>\n<pre><code>mkdir -p temp/concat\n# 双端合并为单个文件\nfor i in `tail -n+2 result/metadata.txt|cut -f1`;do \n  cat temp/qc/$&#123;i&#125;_?.fastq \\\n  &gt; temp/concat/$&#123;i&#125;.fq; done\n# 查看样品数量和大小\nls -shl temp/concat/*.fq\n# 数据太大，计算时间长，可用head对单端分析截取20M序列，即3G，则为80M行，详见附录：HUMAnN2减少输出文件加速\n</code></pre>\n<h2 id=\"2-2-HUMAnN2计算物种和功能组成\"><a href=\"#2-2-HUMAnN2计算物种和功能组成\" class=\"headerlink\" title=\"2.2 HUMAnN2计算物种和功能组成\"></a>2.2 HUMAnN2计算物种和功能组成</h2><ul>\n<li>物种组成调用MetaPhlAn2, bowtie2比对至核酸序列，解决有哪些微生物存在的问题；</li>\n<li>功能组成为humann2调用diamond比对至蛋白库11Gb，解决这些微生物参与哪些功能通路的问题；</li>\n<li>输入文件：temp/concat/*.fq 每个样品质控后双端合并后的fastq序列</li>\n<li>输出文件：temp/humann2/ 目录下<ul>\n<li>C1_pathabundance.tsv</li>\n<li>C1_pathcoverage.tsv</li>\n<li>C1_genefamilies.tsv</li>\n</ul>\n</li>\n<li>整合后的输出：<ul>\n<li>result/metaphlan2/taxonomy.tsv 物种丰度表</li>\n<li>result/metaphlan2/taxonomy.spf 物种丰度表（用于stamp分析）</li>\n<li>result/humann2/pathabundance_relab_unstratified.tsv 通路丰度表</li>\n<li>result/humann2/pathabundance_relab_stratified.tsv 通路物种组成丰度表</li>\n<li>stratified(每个菌对此功能通路组成的贡献)和unstratified(功能组成)</li>\n</ul>\n</li>\n</ul>\n<p>启动humann2环境：仅humann2布置于自定义环境下使用</p>\n<pre><code># 方法1. conda加载环境\nconda activate humann2\n# 方法2. source加载指定\n# source /home/liuyongxin/miniconda2/envs/humann2/bin/activate\n</code></pre>\n<p>检查数据库配置是否正确</p>\n<pre><code>humann2 --version # v2.8.1\nhumann2_config\nmkdir -p temp/humann2\n</code></pre>\n<p>单样本1.25M PE150运行测试，8p，2.5M，1~2h；0.2M, 34m；0.1M，30m；0.01M，25m；16p，18m</p>\n<pre><code># CRITICAL ERROR: Can not call software version for bowtie2，见&quot;Perl环境&quot;\ni=C1\n# memusg -t humann2 --input temp/concat/$&#123;i&#125;.fq       --output temp/humann2 --threads 16\n</code></pre>\n<p>多样本并行计算，测试数据约30m，系统耗时12小时</p>\n<pre><code>tail -n+2 result/metadata.txt|cut -f1|rush -j 2 \\\n  &#39;humann2 --input temp/concat/&#123;1&#125;.fq  \\\n  --output temp/humann2/&#39;\n\n# (可选)大文件清理，humann2临时文件可达原始数据30~40倍\n# 链接重要文件至humann2目录\nfor i in `tail -n+2 result/metadata.txt|cut -f1`;do \n   ln temp/humann2/$&#123;i&#125;_humann2_temp/$&#123;i&#125;_metaphlan_bugs_list.tsv temp/humann2/\ndone    \n# 删除临时文件\nrm -rf temp/concat/* temp/humann2/*_humann2_temp\n</code></pre>\n<h2 id=\"2-3-物种组成表\"><a href=\"#2-3-物种组成表\" class=\"headerlink\" title=\"2.3 物种组成表\"></a>2.3 物种组成表</h2><h3 id=\"2-3-1-样品结果合并\"><a href=\"#2-3-1-样品结果合并\" class=\"headerlink\" title=\"2.3.1 样品结果合并\"></a>2.3.1 样品结果合并</h3><pre><code>mkdir -p result/metaphlan2\n# 合并、修正样本名、预览\nmerge_metaphlan_tables.py temp/humann2/*_metaphlan_bugs_list.tsv | \\\n  sed &#39;s/_metaphlan_bugs_list//g&#39; &gt; result/metaphlan2/taxonomy.tsv\nhead -n5 result/metaphlan2/taxonomy.tsv\n</code></pre>\n<h3 id=\"2-3-2-转换为stamp的spf格式\"><a href=\"#2-3-2-转换为stamp的spf格式\" class=\"headerlink\" title=\"2.3.2 转换为stamp的spf格式\"></a>2.3.2 转换为stamp的spf格式</h3><pre><code>metaphlan_to_stamp.pl result/metaphlan2/taxonomy.tsv \\\n  &gt; result/metaphlan2/taxonomy.spf\nhead -n5 result/metaphlan2/taxonomy.spf\n# 下载metadata.txt和taxonomy.spf使用stamp分析\n# 网络分析见附录 metaphlan2-共有或特有物种网络图\n</code></pre>\n<h3 id=\"2-3-3-可选-Python绘制热图\"><a href=\"#2-3-3-可选-Python绘制热图\" class=\"headerlink\" title=\"2.3.3 (可选)Python绘制热图\"></a>2.3.3 (可选)Python绘制热图</h3><pre><code># c设置颜色方案，top设置物种数量，minv最小相对丰度，s标准化方法，log为取10为底对数，xy为势图宽和高，图片可选pdf/png/svg格式\nmetaphlan_hclust_heatmap.py \\\n  --in result/metaphlan2/taxonomy.tsv \\\n  --out result/metaphlan2/heatmap.pdf \\\n  -c jet --top 30 --minv 0.1 \\\n  -s log -x 0.4 -y 0.2\n# 报错解决详见附录：### metaphlan_hclust_heatmap.py报错AttributeError: Unknown property axisbg\n# 帮助见 metaphlan_hclust_heatmap.py -h\n# 更多绘制见3StatPlot.sh\n</code></pre>\n<h2 id=\"2-4-功能组成分析\"><a href=\"#2-4-功能组成分析\" class=\"headerlink\" title=\"2.4 功能组成分析\"></a>2.4 功能组成分析</h2><h3 id=\"2-4-1-功能组成合并、标准化和分层\"><a href=\"#2-4-1-功能组成合并、标准化和分层\" class=\"headerlink\" title=\"2.4.1 功能组成合并、标准化和分层\"></a>2.4.1 功能组成合并、标准化和分层</h3><p>合并通路丰度(pathabundance)，含功能和对应物种组成。<br>可选基因家族(genefamilies 太多)，通路覆盖度(pathcoverage)。<br>注意看屏幕输出<code># Gene table created: result/humann2/pathabundance.tsv</code></p>\n<pre><code>mkdir -p result/humann2\nhumann2_join_tables \\\n  --input temp/humann2 \\\n  --file_name pathabundance \\\n  --output result/humann2/pathabundance.tsv\n# 样本名调整：删除列名多余信息\nhead result/humann2/pathabundance.tsv\nsed -i &#39;s/_Abundance//g&#39; result/humann2/pathabundance.tsv\n# 预览和统计\nhead result/humann2/pathabundance.tsv\ncsvtk -t stat result/humann2/pathabundance.tsv\n</code></pre>\n<p>标准化为相对丰度relab(1)或百万比cpm(1,000,000)</p>\n<pre><code>humann2_renorm_table \\\n  --input result/humann2/pathabundance.tsv \\\n  --units relab \\\n  --output result/humann2/pathabundance_relab.tsv\nhead -n5 result/humann2/pathabundance_relab.tsv\n</code></pre>\n<p>分层结果：功能和对应物种表(stratified)和功能组成表(unstratified)</p>\n<pre><code>humann2_split_stratified_table \\\n  --input result/humann2/pathabundance_relab.tsv \\\n  --output result/humann2/ \n# 可以使用stamp进行统计分析\n</code></pre>\n<h3 id=\"2-4-2-差异比较和柱状图\"><a href=\"#2-4-2-差异比较和柱状图\" class=\"headerlink\" title=\"2.4.2 差异比较和柱状图\"></a>2.4.2 差异比较和柱状图</h3><p>两样本无法组间比较，在pcl层面替换为HMP数据进行统计和可视化。</p>\n<p>参考 <a href=\"https://bitbucket.org/biobakery/humann2/wiki/Home#markdown-header-standard-workflow\">https://bitbucket.org/biobakery/humann2/wiki/Home#markdown-header-standard-workflow</a></p>\n<ul>\n<li>输入数据：通路丰度表格 result/humann2/pathabundance.tsv</li>\n<li>输入数据：实验设计信息 result/metadata.txt</li>\n<li>中间数据：包含分组信息的通路丰度表格文件 result/humann2/pathabundance.pcl </li>\n<li>输出结果：result/humann2/associate.txt</li>\n</ul>\n<p>在通路丰度中添加分组</p>\n<pre><code>## 提取样品列表\nhead -n1 result/humann2/pathabundance.tsv | sed &#39;s/# Pathway/SampleID/&#39; | tr &#39;\\t&#39; &#39;\\n&#39; &gt; temp/header\n## 对应分组，本示例分组为第2列($2)，根据实际情况修改\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125;NR==FNR&#123;a[$1]=$2&#125;NR&gt;FNR&#123;print a[$1]&#125;&#39; result/metadata.txt temp/header | tr &#39;\\n&#39; &#39;\\t&#39;|sed &#39;s/\\t$/\\n/&#39; &gt; temp/group\n# 合成样本、分组+数据\ncat &lt;(head -n1 result/humann2/pathabundance.tsv) temp/group &lt;(tail -n+2 result/humann2/pathabundance.tsv) \\\n  &gt; result/humann2/pathabundance.pcl\nhead -n5 result/humann2/pathabundance.pcl\n</code></pre>\n<p>组间比较，样本量少无差异，结果为4列的文件：通路名字，通路在各个分组的丰度，差异P-value，校正后的Q-value。<br>演示数据2样本无法统计，此处替换为HMP的结果演示统计和绘图(上传hmp_pathabund.pcl，替换pathabundance.pcl为hmp_pathabund.pcl)。</p>\n<pre><code>wget http://210.75.224.110/db/train/meta/result/humann2/hmp_pathabund.pcl\n# cp /db/humann2/hmp_pathabund.pcl ./\nmv hmp_pathabund.pcl result/humann2/\n# 设置输入文件名\npcl=result/humann2/hmp_pathabund.pcl\n# 统计表格行、列数量\ncsvtk -t stat $&#123;pcl&#125;\nhead -n2 $&#123;pcl&#125; |cut -f 1-5\n# 按分组KW检验，注意第二列的分组列名\nhumann2_associate --input $&#123;pcl&#125; \\\n    --focal-metadatum Group --focal-type categorical \\\n    --last-metadatum Group --fdr 0.05 \\\n    --output result/humann2/associate.txt\nwc -l result/humann2/associate.txt\nhead -n5 result/humann2/associate.txt\n</code></pre>\n<p>barplot展示通路的物种组成，如：腺苷核苷酸合成</p>\n<pre><code># --sort sum metadata 按丰度和分组排序\n# 指定差异通路，如 P163-PWY / PWY-3781 / PWY66-409 / PWY1F-823\npath=PWY-3781\nhumann2_barplot --sort sum metadata \\\n    --input $&#123;pcl&#125; --focal-feature $&#123;path&#125; \\\n    --focal-metadatum Group --last-metadatum Group \\\n    --output result/humann2/barplot_$&#123;path&#125;.pdf\n</code></pre>\n<h3 id=\"2-4-3-转换为KEGG注释\"><a href=\"#2-4-3-转换为KEGG注释\" class=\"headerlink\" title=\"2.4.3 转换为KEGG注释\"></a>2.4.3 转换为KEGG注释</h3><p>需要下载utility_mapping数据库并配置成功才可以使用。详见软件和数据库安装1soft_db.sh。</p>\n<p>支持GO、PFAM、eggNOG、level4ec、KEGG的D级KO等注释，详见<code>humann2_regroup_table -h</code>。</p>\n<pre><code># 转换基因家族为KO(uniref90_ko)，可选eggNOG(uniref90_eggnog)或酶(uniref90_level4ec)\nfor i in `tail -n+2 result/metadata.txt|cut -f1`;do\n  humann2_regroup_table \\\n    -i temp/humann2/$&#123;i&#125;_genefamilies.tsv \\\n    -g uniref90_ko \\\n    -o temp/humann2/$&#123;i&#125;_ko.tsv\ndone\n# 合并，并修正样本名\nhumann2_join_tables \\\n  --input temp/humann2/ \\\n  --file_name ko \\\n  --output result/humann2/ko.tsv\nsed -i &#39;1s/_Abundance-RPKs//g&#39; result/humann2/ko.tsv\ntail result/humann2/ko.tsv\n# 与pathabundance类似，可进行标准化renorm、分层stratified、柱状图barplot等操作\n</code></pre>\n<h2 id=\"2-5-GraPhlAn图\"><a href=\"#2-5-GraPhlAn图\" class=\"headerlink\" title=\"2.5 GraPhlAn图\"></a>2.5 GraPhlAn图</h2><pre><code># metaphlan2 to graphlan\nexport2graphlan.py --skip_rows 1,2 -i result/metaphlan2/taxonomy.tsv \\\n  --tree temp/merged_abundance.tree.txt \\\n  --annotation temp/merged_abundance.annot.txt \\\n  --most_abundant 1000 --abundance_threshold 20 --least_biomarkers 10 \\\n  --annotations 3,4 --external_annotations 7\n# 参数说明见PPT，或运行 export2graphlan.py --help\n# graphlan annotation\ngraphlan_annotate.py --annot temp/merged_abundance.annot.txt \\\n  temp/merged_abundance.tree.txt  temp/merged_abundance.xml\n# output PDF figure, annoat and legend\ngraphlan.py temp/merged_abundance.xml result/metaphlan2/graphlan.pdf \\\n  --external_legends \n</code></pre>\n<h2 id=\"2-6-LEfSe差异分析物种\"><a href=\"#2-6-LEfSe差异分析物种\" class=\"headerlink\" title=\"2.6 LEfSe差异分析物种\"></a>2.6 LEfSe差异分析物种</h2><ul>\n<li>输入文件：物种丰度表result/metaphlan2/taxonomy.tsv</li>\n<li>输入文件：样品分组信息 result/metadata.txt</li>\n<li>中间文件：整合后用于LefSe分析的文件 result/metaphlan2/lefse.txt，这个文件可以提供给<a href=\"http://www.ehbio.com/ImageGP\">www.ehbio.com/ImageGP</a> 用于在线LefSE分析</li>\n<li>LefSe结果输出：result/metaphlan2/目录下lefse开头和feature开头的文件</li>\n</ul>\n<p>前面演示数据仅有2个样本，无法进行差异比较。下面使用result12目录中由12个样本生成的结果表进行演示</p>\n<pre><code># 设置结果目录，自己的数据使用result，演示用result12\nresult=result12\n# 下载演示数据\n# wget http://210.75.224.110/db/EasyMetagenome/result12.zip &amp;&amp; unzip result12.zip\n</code></pre>\n<p>准备输入文件，修改样本品为组名(可手动修改)</p>\n<pre><code># 预览输出数据\nhead -n3 $result/metaphlan2/taxonomy.tsv\n# 提取样本行，替换为每个样本一行，修改ID为SampleID\nhead -n1 $result/metaphlan2/taxonomy.tsv|tr &#39;\\t&#39; &#39;\\n&#39;|sed &#39;1 s/ID/SampleID/&#39; &gt;temp/sampleid\nhead -n3 temp/sampleid\n# 提取SampleID对应的分组Group(假设为metadata.txt中第二列$2)，替换换行\\n为制表符\\t，再把行末制表符\\t替换回换行\nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;NR==FNR&#123;a[$1]=$2&#125;NR&gt;FNR&#123;print a[$1]&#125;&#39; $result/metadata.txt temp/sampleid|tr &#39;\\n&#39; &#39;\\t&#39;|sed &#39;s/\\t$/\\n/&#39; &gt;groupid\ncat groupid\n# 合并分组和数据(替换表头)\ncat groupid &lt;(tail -n+2 $result/metaphlan2/taxonomy.tsv) &gt; $result/metaphlan2/lefse.txt\nhead -n3 $result/metaphlan2/lefse.txt\n</code></pre>\n<p>方法1. 推荐在线 <a href=\"http://www.ehbio.com/ImageGP\">http://www.ehbio.com/ImageGP</a> 中LEfSe一键分析 </p>\n<p>方法2. (可选)LEfSe命令行分析代码供参考</p>\n<pre><code># 格式转换为lefse内部格式\nlefse-format_input.py \\\n  $result/metaphlan2/lefse.txt \\\n  temp/input.in -c 1 -o 1000000\n# 运行lefse(样本无重复、分组将报错)\nrun_lefse.py temp/input.in \\\n  temp/input.res\n\n# 绘制物种树注释差异\nlefse-plot_cladogram.py temp/input.res \\\n  result/metaphlan2/lefse_cladogram.pdf --format pdf\n\n# 绘制所有差异features柱状图\nlefse-plot_res.py temp/input.res \\\n  $result/metaphlan2/lefse_res.pdf --format pdf\n    \n# 绘制单个features柱状图\n# 查看显著差异features，按丰度排序\ngrep -v &#39;-&#39; temp/input.res | sort -k3,3n \n# 手动选择指定feature绘图，如Firmicutes\nlefse-plot_features.py -f one \\\n  --feature_name &quot;k__Bacteria.p__Firmicutes&quot; \\\n  --format pdf \\\n  temp/input.in temp/input.res \\\n  $result/metaphlan2/lefse_Firmicutes.pdf\n\n# 批量绘制所有差异features柱状图\nlefse-plot_features.py -f diff \\\n  --archive none --format pdf \\\n  temp/input.in temp/input.res \\\n  $result/metaphlan2/lefse_\n</code></pre>\n<h2 id=\"2-7-Kraken2物种注释\"><a href=\"#2-7-Kraken2物种注释\" class=\"headerlink\" title=\"2.7 Kraken2物种注释\"></a>2.7 Kraken2物种注释</h2><p>Kraken2可以快速完成读长(read)层面的物种注释和定量，还可以进行重叠群(contig)、基因(gene)、宏基因组组装基因组(MAG/bin)层面的序列物种注释。</p>\n<pre><code># 方法1.启动kraken2工作环境\nconda activate kraken2\n# 方法2.启动指定位置的环境\n# source /conda2/envs/kraken2/bin/activate\n# 记录软件版本\nkraken2 --version # 2.1.1\n</code></pre>\n<h3 id=\"2-7-1-Kraken2物种注释\"><a href=\"#2-7-1-Kraken2物种注释\" class=\"headerlink\" title=\"2.7.1 Kraken2物种注释\"></a>2.7.1 Kraken2物种注释</h3><ul>\n<li><p>{1}代表样本名字</p>\n</li>\n<li><p>输入：temp/qc/{1}_1_kneaddata_paired*.fastq 质控后的FASTQ数据</p>\n</li>\n<li><p>参考数据库：-db ${db}/kraken2/mini/，默认标准数据库&gt;50GB，这里使用8GB迷你数据库。</p>\n</li>\n<li><p>输出结果：每个样本单独输出，temp/kraken2/{1}_report和temp/kraken2/{1}_output</p>\n</li>\n<li><p>整合后的输出结果： result/kraken2/taxonomy_count.txt 物种丰度表</p>\n<p>  mkdir -p temp/kraken2</p>\n</li>\n</ul>\n<p>(可选) 单样本注释，5m</p>\n<pre><code>i=C1\n# 1m，--use-mpa-style可直接输出metphlan格式，但bracken无法处理\n# 2020/12/02版，65K双端序列，38.58%可注释，61.42%未注释，耗时5s，内存峰值8G\n# 2021/04/23版，65K双端序列，52.17%可注释，52.17%未注释，耗时5s，内存峰值8G\n# 内存8G的PC可运行，需要与硬盘交换，需3m，内存峰值4.5G\nkraken2 --db $&#123;db&#125;/kraken2/mini/ --paired temp/qc/$&#123;i&#125;_?.fastq \\\n  --threads 8 --use-names --report-zero-counts \\\n  --report temp/kraken2/$&#123;i&#125;.report \\\n  --output temp/kraken2/$&#123;i&#125;.output\n</code></pre>\n<p>多样本并行生成report，1样本8线程，内存大但速度快，内存不多不建议用多线程</p>\n<pre><code>tail -n+2 result/metadata.txt|cut -f1|rush -j 2 \\\n  &quot;kraken2 --db $&#123;db&#125;/kraken2/mini --paired temp/qc/&#123;1&#125;_?.fastq \\\n  --threads 8 --use-names --report-zero-counts \\\n  --report temp/kraken2/&#123;1&#125;.report \\\n  --output temp/kraken2/&#123;1&#125;.output&quot;\n</code></pre>\n<p>使用krakentools转换report为mpa格式</p>\n<pre><code>for i in `tail -n+2 result/metadata.txt|cut -f1`;do\n  kreport2mpa.py -r temp/kraken2/$&#123;i&#125;.report \\\n    --display-header \\\n    -o temp/kraken2/$&#123;i&#125;.mpa;done\n</code></pre>\n<p>合并样本为表格</p>\n<pre><code>mkdir -p result/kraken2\n# 输出结果行数相同，但不一定顺序一致，要重新排序\ntail -n+2 result/metadata.txt|cut -f1|rush -j 1 \\\n  &#39;tail -n+2 temp/kraken2/&#123;1&#125;.mpa | LC_ALL=C sort | cut -f 2 | sed &quot;1 s/^/&#123;1&#125;\\n/&quot; &gt; temp/kraken2/&#123;1&#125;_count &#39;\n# 提取第一样本品行名为表行名\nheader=`tail -n 1 result/metadata.txt | cut -f 1`\necho $header\ntail -n+2 temp/kraken2/$&#123;header&#125;.mpa | LC_ALL=C sort | cut -f 1 | \\\n  sed &quot;1 s/^/Taxonomy\\n/&quot; &gt; temp/kraken2/0header_count\nhead -n3 temp/kraken2/0header_count\n# paste合并样本为表格\nls temp/kraken2/*count\npaste temp/kraken2/*count &gt; result/kraken2/tax_count.mpa\n# 检查表格及统计\ncsvtk -t stat result/kraken2/tax_count.mpa\n</code></pre>\n<h3 id=\"2-7-2-Bracken估计丰度\"><a href=\"#2-7-2-Bracken估计丰度\" class=\"headerlink\" title=\"2.7.2 Bracken估计丰度\"></a>2.7.2 Bracken估计丰度</h3><p>参数简介：</p>\n<ul>\n<li>-d为数据库，与kraken2一致</li>\n<li>-i为输入kraken2报告文件</li>\n<li>r是读长，此处为100，通常为150</li>\n<li>l为分类级，本次种级别(S)丰度估计，可选域、门、纲、目、科、属、种：D,P,C,O,F,G,S</li>\n<li>t是阈值，默认为0，越大越可靠，但可用数据越少</li>\n<li>-o 输出重新估计的值</li>\n</ul>\n<p>循环重新估计每个样品的丰度</p>\n<pre><code># 设置估算的分类级别D,P,C,O,F,G,S，常用 P和S\ntax=P\nmkdir -p temp/bracken\nfor i in `tail -n+2 result/metadata.txt|cut -f1`;do\n    # i=C1\n    bracken -d $&#123;db&#125;/kraken2/mini \\\n      -i temp/kraken2/$&#123;i&#125;.report \\\n      -r 100 -l $&#123;tax&#125; -t 0 \\\n      -o temp/bracken/$&#123;i&#125;;done\n</code></pre>\n<p>结果描述：共7列，分别为物种名、ID、分类级、读长计数、补充读长计数、<strong>总数、百分比</strong></p>\n<pre><code>name    taxonomy_id     taxonomy_lvl    kraken_assigned_reads   added_reads     new_est_reads        fraction_total_reads\nCapnocytophaga sputigena        1019    S       4798    996     5794    0.23041\nCapnocytophaga sp. oral taxon 878       1316596 S       239     21      260     0.01034\n</code></pre>\n<p>bracken结果合并成表</p>\n<pre><code># 输出结果行数相同，但不一定顺序一致，要去年表头重新排序\n# 仅提取第6列reads count，并添加样本名\ntail -n+2 result/metadata.txt|cut -f1|rush -j 1 \\\n  &#39;tail -n+2 temp/bracken/&#123;1&#125; | LC_ALL=C sort | cut -f6 | sed &quot;1 s/^/&#123;1&#125;\\n/&quot; &gt; temp/bracken/&#123;1&#125;.count &#39;\n# 提取第一样本品行名为表行名\nh=`tail -n1 result/metadata.txt|cut -f1`\ntail -n+2 temp/bracken/$&#123;h&#125;|sort|cut -f1 | \\\n  sed &quot;1 s/^/Taxonomy\\n/&quot; &gt; temp/bracken/0header.count\n# 检查文件数，为n+1\nls temp/bracken/*count | wc\n# paste合并样本为表格，并删除非零行\npaste temp/bracken/*count &gt; result/kraken2/bracken.$&#123;tax&#125;.txt\n# 统计行列，默认去除表头\ncsvtk -t stat result/kraken2/bracken.$&#123;tax&#125;.txt\n</code></pre>\n<p>结果筛选</p>\n<pre><code># 需要指定安装R的位置和脚本位置\n# alias Rscript=&quot;/anaconda2/bin/Rscript --vanilla&quot;\nsd=/db/EasyMicrobiome/script\n\n# microbiome_helper按频率过滤，-r可标准化，-e过滤\nRscript $sd/filter_feature_table.R \\\n  -i result/kraken2/bracken.$&#123;tax&#125;.txt \\\n  -p 0.01 \\\n  -o result/kraken2/bracken.$&#123;tax&#125;.0.01\n# &gt; 0.01(1%)的样本在出现，数量会明显减少\ncsvtk -t stat result/kraken2/bracken.$&#123;tax&#125;.0.01\n\n# 门水平去除脊索动物\ngrep &#39;Chordata&#39; result/kraken2/bracken.P.0.01\ngrep -v &#39;Chordata&#39; result/kraken2/bracken.P.0.01 &gt; result/kraken2/bracken.P.0.01-H\n\n# 按物种名手动去除宿主污染，以人为例(需按种水平计算相关结果)\n# 种水平去除人类P:Chordata,S:Homo sapiens\ngrep &#39;Homo sapiens&#39; result/kraken2/bracken.S.0.01\ngrep -v &#39;Homo sapiens&#39; result/kraken2/bracken.S.0.01 &gt; result/kraken2/bracken.S.0.01-H\n</code></pre>\n<p>分析后清理每条序列的注释大文件</p>\n<pre><code># rm -rf temp/kraken2/*.output\n</code></pre>\n<p>多样性分析/物种组成，详见3StatPlot.sh，Kraken2结果筛选序列见附录</p>\n<h1 id=\"三、组装分析流程-Assemble-based\"><a href=\"#三、组装分析流程-Assemble-based\" class=\"headerlink\" title=\"三、组装分析流程 Assemble-based\"></a>三、组装分析流程 Assemble-based</h1><h2 id=\"3-1-拼接-Assembly\"><a href=\"#3-1-拼接-Assembly\" class=\"headerlink\" title=\"3.1 拼接 Assembly\"></a>3.1 拼接 Assembly</h2><h3 id=\"3-1-1-MEGAHIT拼接\"><a href=\"#3-1-1-MEGAHIT拼接\" class=\"headerlink\" title=\"3.1.1 MEGAHIT拼接\"></a>3.1.1 MEGAHIT拼接</h3><pre><code># 启动工作环境\nconda activate meta\n\n# 删除旧文件夹，否则megahit无法运行\nrm -rf temp/megahit\n# 组装，10~30m，TB级数据需几天至几周\nmegahit -t 6 \\\n    -1 `tail -n+2 result/metadata.txt|cut -f1|sed &#39;s/^/temp\\/qc\\//;s/$/_1.fastq/&#39;|tr &#39;\\n&#39; &#39;,&#39;|sed &#39;s/,$//&#39;` \\\n    -2 `tail -n+2 result/metadata.txt|cut -f1|sed &#39;s/^/temp\\/qc\\//;s/$/_2.fastq/&#39;|tr &#39;\\n&#39; &#39;,&#39;|sed &#39;s/,$//&#39;` \\\n    -o temp/megahit \n# 统计大小通常300M~5G，如果contigs太多，可以按长度筛选，降低数据量，提高基因完整度，详见附录megahit\nseqkit stat temp/megahit/final.contigs.fa\n# 预览重叠群最前6行，前60列字符\nhead -n6 temp/megahit/final.contigs.fa | cut -c1-60\n\n# 备份重要结果\nmkdir -p result/megahit/\nln -f temp/megahit/final.contigs.fa result/megahit/\n# 删除临时文件\nrm -rf temp/megahit/intermediate_contigs/\n</code></pre>\n<h3 id=\"3-1-2-可选-metaSPAdes精细拼接\"><a href=\"#3-1-2-可选-metaSPAdes精细拼接\" class=\"headerlink\" title=\"3.1.2 (可选) metaSPAdes精细拼接\"></a>3.1.2 (可选) metaSPAdes精细拼接</h3><pre><code># 精细但使用内存和时间更多，15~65m\nmemusg -t metaspades.py -t 3 -m 100 \\\n  `tail -n+2 result/metadata.txt|cut -f1|sed &#39;s/^/temp\\/qc\\//;s/$/_1.fastq/&#39;|sed &#39;s/^/-1 /&#39;| tr &#39;\\n&#39; &#39; &#39;` \\\n  `tail -n+2 result/metadata.txt|cut -f1|sed &#39;s/^/temp\\/qc\\//;s/$/_2.fastq/&#39;|sed &#39;s/^/-2 /&#39;| tr &#39;\\n&#39; &#39; &#39;` \\\n  -o temp/metaspades\n# 23M，contigs体积更大\nseqkit stat temp/metaspades/contigs.fasta\n\n# 备份重要结果\nmkdir -p result/metaspades/\nln -f temp/metaspades/contigs.fasta result/metaspades/\n# 删除临时文件\nrm -rf temp/metaspades\n</code></pre>\n<p>注：metaSPAdes支持二、三代混合组装，见附录，此外还有OPERA-MS组装二、三代方案</p>\n<h3 id=\"3-1-3-QUAST评估\"><a href=\"#3-1-3-QUAST评估\" class=\"headerlink\" title=\"3.1.3 QUAST评估\"></a>3.1.3 QUAST评估</h3><pre><code>quast.py result/megahit/final.contigs.fa -o result/megahit/quast -t 2\n# 生成report文本tsv/txt、网页html、PDF等格式报告\n\n# (可选) megahit和metaspades比较\nquast.py --label &quot;megahit,metapasdes&quot; \\\n    result/megahit/final.contigs.fa \\\n    result/metaspades/contigs.fasta \\\n    -o result/quast\n\n# (可选)metaquast评估，更全面，但需下载相关数据库，受网速影响可能时间很长(我很少成功)\n# metaquast based on silva, and top 50 species genome to access\ntime metaquast.py result/megahit/final.contigs.fa -o result/megahit/metaquast\n</code></pre>\n<h2 id=\"3-2-基因预测、去冗余和定量\"><a href=\"#3-2-基因预测、去冗余和定量\" class=\"headerlink\" title=\"3.2 基因预测、去冗余和定量\"></a>3.2 基因预测、去冗余和定量</h2><pre><code># Gene prediction, cluster &amp; quantitfy\n</code></pre>\n<h3 id=\"3-2-1-metaProdigal基因预测\"><a href=\"#3-2-1-metaProdigal基因预测\" class=\"headerlink\" title=\"3.2.1 metaProdigal基因预测\"></a>3.2.1 metaProdigal基因预测</h3><pre><code># 输入文件：拼装好的序列文件 result/megahit/final.contigs.fa\n# 输出文件：prodigal预测的基因序列 temp/prodigal/gene.fa\n# 基因文件大，可参考附录prodigal拆分基因文件，并行计算\n\nmkdir -p temp/prodigal\n# prodigal的meta模式预测基因，35s，&gt;和2&gt;&amp;1记录分析过程至gene.log\nprodigal -i result/megahit/final.contigs.fa \\\n    -d temp/prodigal/gene.fa \\\n    -o temp/prodigal/gene.gff \\\n    -p meta -f gff &gt; temp/prodigal/gene.log 2&gt;&amp;1 \n# 查看日志是否运行完成，有无错误\ntail temp/prodigal/gene.log\n# 统计基因数量\nseqkit stat temp/prodigal/gene.fa \n# 统计完整基因数量，数据量大可只用完整基因部分\ngrep -c &#39;partial=00&#39; temp/prodigal/gene.fa \n# 提取完整基因(完整片段获得的基因全为完整，如成环的细菌基因组)\ngrep &#39;partial=00&#39; temp/prodigal/gene.fa | cut -f1 -d &#39; &#39;| sed &#39;s/&gt;//&#39; &gt; temp/prodigal/full_length.id\nseqkit grep -f temp/prodigal/full_length.id temp/prodigal/gene.fa &gt; temp/prodigal/full_length.fa\nseqkit stat temp/prodigal/full_length.fa\n</code></pre>\n<h3 id=\"3-2-2-基因聚类-去冗余cd-hit\"><a href=\"#3-2-2-基因聚类-去冗余cd-hit\" class=\"headerlink\" title=\"3.2.2 基因聚类/去冗余cd-hit\"></a>3.2.2 基因聚类/去冗余cd-hit</h3><pre><code># 输入文件：prodigal预测的基因序列 temp/prodigal/gene.fa\n# 输出文件：去冗余后的基因和蛋白序列：result/NR/nucleotide.fa, result/NR/protein.fa\n\nmkdir -p result/NR\n# aS覆盖度，c相似度，G局部比对，g最优解，T多线程，M内存0不限制\n# 2万基因2m，2千万需要2000h，多线程可加速\ncd-hit-est -i temp/prodigal/gene.fa \\\n    -o result/NR/nucleotide.fa \\\n    -aS 0.9 -c 0.95 -G 0 -g 0 -T 0 -M 0\n# 统计非冗余基因数量，单次拼接结果数量下降不大，多批拼接冗余度高\ngrep -c &#39;&gt;&#39; result/NR/nucleotide.fa\n# 翻译核酸为对应蛋白序列, --trim去除结尾的*\nseqkit translate --trim result/NR/nucleotide.fa \\\n    &gt; result/NR/protein.fa \n# 两批数据去冗余使用cd-hit-est-2d加速，见附录\n</code></pre>\n<h3 id=\"3-2-3-基因定量salmon\"><a href=\"#3-2-3-基因定量salmon\" class=\"headerlink\" title=\"3.2.3 基因定量salmon\"></a>3.2.3 基因定量salmon</h3><pre><code># 输入文件：去冗余后的基因和蛋白序列：result/NR/nucleotide.fa\n# 输出文件：Salmon定量后的结果：result/salmon/gene.count, gene.TPM\n\nmkdir -p temp/salmon\nsalmon -v # 1.4.0\n\n# 建索引, -t序列, -i 索引，10s\nsalmon index \\\n  -t result/NR/nucleotide.fa \\\n  -p 9 \\\n  -i temp/salmon/index \n\n# 定量，l文库类型自动选择，p线程，--meta宏基因组模式, 2个任务并行2个样\n# 注意parallel中待并行的命令必须是双引号，内部变量需要使用原始绝对路径 \ntail -n+2 result/metadata.txt|cut -f1|rush -j 2 \\\n  &quot;salmon quant \\\n    -i temp/salmon/index -l A -p 3 --meta \\\n    -1 temp/qc/&#123;1&#125;_1.fastq \\\n    -2 temp/qc/&#123;1&#125;_2.fastq \\\n    -o temp/salmon/&#123;1&#125;.quant&quot;\n\n# 合并\nmkdir -p result/salmon\nsalmon quantmerge --quants temp/salmon/*.quant \\\n    -o result/salmon/gene.TPM\nsalmon quantmerge --quants temp/salmon/*.quant \\\n    --column NumReads -o result/salmon/gene.count\nsed -i &#39;1 s/.quant//g&#39; result/salmon/gene.*\n\n# 预览结果表格\nhead -n3 result/salmon/gene.*\n</code></pre>\n<h2 id=\"3-3-功能基因注释\"><a href=\"#3-3-功能基因注释\" class=\"headerlink\" title=\"3.3 功能基因注释\"></a>3.3 功能基因注释</h2><pre><code># 输入数据：上一步预测的蛋白序列 result/NR/protein.fa\n# 中间结果：temp/eggnog/protein.emapper.seed_orthologs\n#           temp/eggnog/output.emapper.annotations\n#           temp/eggnog/output\n\n# COG定量表：result/eggnog/cogtab.count\n#            result/eggnog/cogtab.count.spf (用于STAMP)\n\n# KO定量表：result/eggnog/kotab.count\n#           result/eggnog/kotab.count.spf  (用于STAMP)\n\n# CAZy碳水化合物注释和定量：result/dbcan2/cazytab.count\n#                           result/dbcan2/cazytab.count.spf (用于STAMP)\n\n# 抗生素抗性：result/resfam/resfam.count\n#             result/resfam/resfam.count.spf (用于STAMP)\n\n# 这部分可以拓展到其它数据库\n</code></pre>\n<h3 id=\"3-3-1-基因注释eggNOG-COG-KEGG-CAZy\"><a href=\"#3-3-1-基因注释eggNOG-COG-KEGG-CAZy\" class=\"headerlink\" title=\"3.3.1 基因注释eggNOG(COG/KEGG/CAZy)\"></a>3.3.1 基因注释eggNOG(COG/KEGG/CAZy)</h3><pre><code># https://github.com/eggnogdb/eggnog-mapper/wiki/eggNOG-mapper-v2\n\n# 记录软件版本\nconda activate eggnog\nemapper.py --version # 2.1.6\n\n# diamond比对基因至eggNOG 5.0数据库, 9p11m, 1~9h，默认diamond 1e-3\nmkdir -p temp/eggnog\ntime emapper.py --no_annot --no_file_comments --override \\\n  --data_dir $&#123;db&#125;/eggnog \\\n  -i result/NR/protein.fa \\\n  --cpu 9 -m diamond \\\n  -o temp/eggnog/protein\n\n# 比对结果功能注释, 1h # sqlite3.OperationalError: no such table: prots是数据库不配套，重新下载即可\nemapper.py \\\n  --annotate_hits_table temp/eggnog/protein.emapper.seed_orthologs \\\n  --data_dir $&#123;db&#125;/eggnog \\\n  --cpu 9 --no_file_comments --override \\\n  -o temp/eggnog/output\n\n# 2.1较2.0结果又有新变化，添加了#号表头，减少了列\nsed &#39;1 s/^#//&#39; temp/eggnog/output.emapper.annotations \\\n  &gt; temp/eggnog/output\ncsvtk -t headers -v temp/eggnog/output\n</code></pre>\n<p>summarizeAbundance生成COG/KO/CAZy丰度汇总表</p>\n<pre><code>mkdir -p result/eggnog\n# 显示帮助，需要Python3环境，可修改软件第一行指定python位置，如指定某Python执行脚本 /mnt/bai/yongxin/miniconda2/envs/humann3/bin/python3 /db/EasyMicrobiome/script/summarizeAbundance.py\nsummarizeAbundance.py -h\n# 汇总，7列COG_category按字母分隔，12列KEGG_ko和19列CAZy按逗号分隔，原始值累加\n# 指定humann3中的Python 3.7.6运行正常，qiime2中的Python 3.6.13报错\nsummarizeAbundance.py \\\n  -i result/salmon/gene.TPM \\\n  -m temp/eggnog/output \\\n  -c &#39;7,12,19&#39; -s &#39;*+,+,&#39; -n raw \\\n  -o result/eggnog/eggnog\nsed -i &#39;s/^ko://&#39; result/eggnog/eggnog.KEGG_ko.raw.txt\nsed -i &#39;/^-/d&#39; result/eggnog/eggnog*\n# eggnog.CAZy.raw.txt  eggnog.COG_category.raw.txt  eggnog.KEGG_ko.raw.txt\n\n# 添加注释生成STAMP的spf格式，结合metadata.txt进行差异比较\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$2&#125; NR&gt;FNR&#123;print a[$1],$0&#125;&#39; \\\n  /db/EasyMicrobiome/kegg/KO_description.txt \\\n  result/eggnog/eggnog.KEGG_ko.raw.txt | \\\n  sed &#39;s/^\\t/Unannotated\\t/&#39; \\\n  &gt; result/eggnog/eggnog.KEGG_ko.TPM.spf\n# KO to level 1/2/3\nsummarizeAbundance.py \\\n  -i result/eggnog/eggnog.KEGG_ko.raw.txt \\\n  -m /db/EasyMicrobiome/kegg/KO1-4.txt \\\n  -c 2,3,4 -s &#39;,+,+,&#39; -n raw \\\n  -o result/eggnog/KEGG\n \n# CAZy\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$2&#125; NR&gt;FNR&#123;print a[$1],$0&#125;&#39; \\\n   /db/EasyMicrobiome/dbcan2/CAZy_description.txt result/eggnog/eggnog.CAZy.raw.txt | \\\n  sed &#39;s/^\\t/Unannotated\\t/&#39; &gt; result/eggnog/eggnog.CAZy.TPM.spf\n\n# COG\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$2&quot;\\t&quot;$3&#125; NR&gt;FNR&#123;print a[$1],$0&#125;&#39; \\\n  /db/EasyMicrobiome/eggnog/COG.anno result/eggnog/eggnog.COG_category.raw.txt &gt; \\\n  result/eggnog/eggnog.COG_category.TPM.spf\n</code></pre>\n<h3 id=\"3-3-2-可选-碳水化合物dbCAN2\"><a href=\"#3-3-2-可选-碳水化合物dbCAN2\" class=\"headerlink\" title=\"3.3.2 (可选)碳水化合物dbCAN2\"></a>3.3.2 (可选)碳水化合物dbCAN2</h3><pre><code># 比对CAZy数据库, 用时2~18m\nmkdir -p temp/dbcan2\n# --sensitive慢10倍，dbCAN2推荐e值为1e-102，此处结果3条太少，以1e-3为例演示\ndiamond blastp \\\n  --db /db/dbcan2/CAZyDB.09242021 \\\n  --query result/NR/protein.fa \\\n  --threads 9 -e 1e-3 --outfmt 6 --max-target-seqs 1 --quiet \\\n  --out temp/dbcan2/gene_diamond.f6\nwc -l temp/dbcan2/gene_diamond.f6\n# 整理比对数据为表格 \nmkdir -p result/dbcan2\n# 提取基因与dbcan分类对应表\nformat_dbcan2list.pl \\\n  -i temp/dbcan2/gene_diamond.f6 \\\n  -o temp/dbcan2/gene.list \n# 按对应表累计丰度，依赖\nsummarizeAbundance.py \\\n  -i result/salmon/gene.TPM \\\n  -m temp/dbcan2/gene.list \\\n  -c 2 -s &#39;,&#39; -n raw \\\n  -o result/dbcan2/TPM\n# 添加注释生成STAMP的spf格式，结合metadata.txt进行差异比较\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$2&#125; NR&gt;FNR&#123;print a[$1],$0&#125;&#39; \\\n   /db/EasyMicrobiome/dbcan2/CAZy_description.txt result/dbcan2/TPM.CAZy.raw.txt | \\\n  sed &#39;s/^\\t/Unannotated\\t/&#39; &gt; result/dbcan2/TPM.CAZy.raw.spf\n# 检查未注释数量，有则需要检查原因\n# grep &#39;Unannotated&#39; result/dbcan2/TPM.CAZy.raw.spf|wc -l\n</code></pre>\n<h3 id=\"3-3-3-抗生素抗性CARD\"><a href=\"#3-3-3-抗生素抗性CARD\" class=\"headerlink\" title=\"3.3.3 抗生素抗性CARD\"></a>3.3.3 抗生素抗性CARD</h3><p>数据库：<a href=\"https://card.mcmaster.ca/\">https://card.mcmaster.ca/</a> ，有在线分析平台，本地代码供参考</p>\n<pre><code># 参考文献：http://doi.org/10.1093/nar/gkz935\n# 软件使用Github: https://github.com/arpcard/rgi\n# 启动rgi环境\nconda activate rgi\nrgi -h # 5.2.1\n# 蛋白注释\nmkdir -p result/card\ncut -f 1 -d &#39; &#39; result/NR/protein.fa &gt; temp/protein.fa\nrgi main -i temp/protein.fa -t protein \\\n  -n 9 -a DIAMOND --include_loose --clean \\\n  -o result/card/protein\n</code></pre>\n<p>结果说明：</p>\n<ul>\n<li>protein.json，在线可视化</li>\n<li>protein.txt，注释基因列表</li>\n</ul>\n<h2 id=\"3-4-基因物种注释\"><a href=\"#3-4-基因物种注释\" class=\"headerlink\" title=\"3.4 基因物种注释\"></a>3.4 基因物种注释</h2><pre><code># Generate report in default taxid output\nconda activate meta\nmemusg -t kraken2 --db /db/kraken2/mini \\\n  result/NR/nucleotide.fa \\\n  --threads 3 \\\n  --report temp/NRgene.report \\\n  --output temp/NRgene.output\n# Genes &amp; taxid list\ngrep &#39;^C&#39; temp/NRgene.output|cut -f 2,3|sed &#39;1 i Name\\ttaxid&#39; \\\n  &gt; temp/NRgene.taxid\n# Add taxonomy\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$0&#125; NR&gt;FNR&#123;print $1,a[$2]&#125;&#39; \\\n  /db/EasyMicrobiome/kraken2/taxonomy.txt \\\n  temp/NRgene.taxid \\\n  &gt; result/NR/nucleotide.tax\nmemusg -t /conda2/envs/humann3/bin/python3 /db/EasyMicrobiome/script/summarizeAbundance.py \\\n  -i result/salmon/gene.TPM \\\n  -m result/NR/nucleotide.tax \\\n  -c &#39;2,3,4,5,6,7,8,9&#39; -s &#39;,+,+,+,+,+,+,+,&#39; -n raw \\\n  -o result/NR/tax\nwc -l result/NR/tax*|sort -n\n</code></pre>\n<h1 id=\"四、挖掘单菌基因组-分箱-Binning\"><a href=\"#四、挖掘单菌基因组-分箱-Binning\" class=\"headerlink\" title=\"四、挖掘单菌基因组/分箱(Binning)\"></a>四、挖掘单菌基因组/分箱(Binning)</h1><h2 id=\"4-1-MetaWRAP\"><a href=\"#4-1-MetaWRAP\" class=\"headerlink\" title=\"4.1 MetaWRAP\"></a>4.1 MetaWRAP</h2><pre><code># 主要使用MetaWRAP，演示基于官方测试数据\n# 主页：https://github.com/bxlab/metaWRAP\n# 挖掘单菌基因组，需要研究对象复杂度越低、测序深度越大，结果质量越好。要求单样本6GB+，复杂样本如土壤推荐数据量30GB+，至少3个样本\n# 上面的演示数据12个样仅140MB，无法获得单菌基因组，这里使用官方测序数据演示讲解\n# 软件和数据库布置需2-3天，演示数据分析过程超10h，标准30G样也需3-30天，由服务器性能决定。\n</code></pre>\n<h3 id=\"4-1-1-准备数据和环境变量\"><a href=\"#4-1-1-准备数据和环境变量\" class=\"headerlink\" title=\"4.1.1 准备数据和环境变量\"></a>4.1.1 准备数据和环境变量</h3><pre><code># 流程: https://github.com/bxlab/metaWRAP/blob/master/Usage_tutorial.md\n&gt; \n# 输入数据：质控后的FASTQ序列，文件名格式必须为*_1.fastq和*_2.fastq\n#           C1_1_kneaddata_paired_1.fastq  -&gt; C1_1_1.fq\n#           C1_1_kneaddata_paired_2.fastq  -&gt; C1_1_2.fq\n#           放置到 binning/temp/qc 目录下\n\n# 拼装获得的contig文件：result/megahit/final.contigs.fa\n#           放置到 binning/temp/megahit 目录下\n#        \n\n# 中间输出文件：\n#     Binning结果：binning/temp/binning\n#     提纯后的Bin统计结果：binning/temp/bin_refinement/metawrap_50_10_bins.stats\n#     Bin定量结果文件：binning/temp/bin_quant/bin_abundance_heatmap.png\n#                      binning/temp/bin_quant/bin_abundance_table.tab (数据表)\n#     Bin物种注释结果：binning/temp/bin_classify/bin_taxonomy.tab\n#     Prokka基因预测结果：binning/temp/bin_annotate/prokka_out/bin.10.ffn 核酸序列\n#     Bin可视化结果：binning/temp/bloblogy/final.contigs.binned.blobplot (数据表)\n#                    binning/temp/bloblogy/blobplot_figures (可视化图)\n\n# 准备原始数据从头分析，详见公众号或官网教程\n# 这里我们从质控后数据和拼接结果开始\ncd $&#123;wd&#125;\nmkdir -p binning &amp;&amp; cd binning\nmkdir -p temp &amp;&amp; cd temp\n# 这里基于质控clean数据和拼接好的contigs，自己链接自上游分析\n# 7G质控数据，输入数据文件名格式必须为*_1.fastq和*_2.fastq\nmkdir -p seq\ncd seq\n# 方法1. 下载测序数据\n# for i in `seq 7 9`;do\n#    wget -c http://210.75.224.110/share/meta/metawrap/ERR01134$&#123;i&#125;_1.fastq.gz\n#    wget -c http://210.75.224.110/share/meta/metawrap/ERR01134$&#123;i&#125;_2.fastq.gz\n# done\n# gunzip *.gz # 解压文件\n# rename .fq .fastq *.fq # 批量修改扩展名\n# 方法2. 复制准备好的数据\nln -sf $&#123;db&#125;/metawrap/*.fastq ./\ncd ..\n# megahit拼接结果\nmkdir -p megahit\ncd megahit\n# wget -c http://210.75.224.110/share/meta/metawrap/final.contigs.fa.gz\n# gunzip *.gz\nln -s $&#123;db&#125;/metawrap/*.fa ./\ncd ../..\n\n# 加载运行环境\ncd $&#123;wd&#125;/binning\nconda activate metawrap\n</code></pre>\n<h3 id=\"4-1-2-运行三种分箱软件\"><a href=\"#4-1-2-运行三种分箱软件\" class=\"headerlink\" title=\"4.1.2 运行三种分箱软件\"></a>4.1.2 运行三种分箱软件</h3><pre><code>metawrap -v\n# 输入文件为contig和clean reads\n# 调用三大主流binning程序cococt, maxbin2, metabat2\n# 8p线程2h，24p耗时1h\n# nohup 和 &amp; 保证任务在后台不被中断，且记录输出内容到 nohup.out(可选)\nnohup metawrap binning -o temp/binning -t 1 -a temp/megahit/final.contigs.fa \\\n  --metabat2 --maxbin2 --concoct temp/seq/ERR*.fastq &amp;\n# 用自己的文件，替换输出文件名为 *1_kneaddata_paired*.fastq \n# 如果想接上上面的流程使用自己的文件做分析，则把ERR*.fastq替换为 *1_kneaddata_paired*.fastq\n# 输出文件夹 temp/binning 包括3种软件结果和中间文件\n</code></pre>\n<h3 id=\"4-1-3-Bin提纯\"><a href=\"#4-1-3-Bin提纯\" class=\"headerlink\" title=\"4.1.3 Bin提纯\"></a>4.1.3 Bin提纯</h3><pre><code># 8线程2h， 24p 1h\ncd $&#123;wd&#125;/binning\n# rm -rf temp/bin_refinement\nmetawrap bin_refinement \\\n  -o temp/bin_refinement \\\n  -A temp/binning/metabat2_bins/ \\\n  -B temp/binning/maxbin2_bins/ \\\n  -C temp/binning/concoct_bins/ \\\n  -c 50 -x 10 -t 2\n# 查看高质量Bin的数量，10个，见temp/bin_refinement/metawrap_50_10_bins.stats目录\nwc -l temp/bin_refinement/metawrap_50_10_bins.stats\n# 结果改进程度见temp/bin_refinement/figures/目录\n</code></pre>\n<h3 id=\"4-1-4-Bin定量\"><a href=\"#4-1-4-Bin定量\" class=\"headerlink\" title=\"4.1.4 Bin定量\"></a>4.1.4 Bin定量</h3><pre><code># 使用salmon计算每个bin在样本中相对丰度\n# 耗时3m，系统用时10m，此处可设置线程，但salmon仍调用全部资源\n\n# 需要指定输出文件夹，包括4.3中的参数的输出目录\nmetawrap quant_bins -b temp/bin_refinement/metawrap_50_10_bins -t 8 \\\n  -o temp/bin_quant -a temp/megahit/final.contigs.fa temp/seq/ERR*.fastq\n# 文件名字改变\n# 结果包括bin丰度热图`temp/bin_quant/bin_abundance_heatmap.png`\n# 如果想自己画图，原始数据位于`temp/bin_quant/bin_abundance_table.tab`\nls -l temp/bin_quant/bin_abundance_heatmap.png\n</code></pre>\n<h3 id=\"4-1-5-Bin注释\"><a href=\"#4-1-5-Bin注释\" class=\"headerlink\" title=\"4.1.5 Bin注释\"></a>4.1.5 Bin注释</h3><pre><code># Taxator-tk对每条contig物种注释，再估计bin整体的物种，11m (用时66 min)\nmetawrap classify_bins -b temp/bin_refinement/metawrap_50_10_bins \\\n  -o temp/bin_classify -t 2 &amp;\n# 注释结果见`temp/bin_classify/bin_taxonomy.tab`\n\n# export LD_LIBRARY_PATH=/conda2/envs/metagenome_env/lib/:$&#123;LD_LIBRARY_PATH&#125;\n # 这是动态链接库找不到时的一个简单的应急策略\nln -s /conda2/envs/metagenome_env/lib/libssl.so.1.0.0 .\nln -s /conda2/envs/metagenome_env/lib/libcrypto.so.1.0.0 .\n\n# 基于prokka基因注释，4m\nmetaWRAP annotate_bins -o temp/bin_annotate \\\n  -b temp/bin_refinement/metawrap_50_10_bins  -t 1\n# 每个bin基因注释的gff文件bin_funct_annotations, \n# 核酸ffn文件bin_untranslated_genes，\n# 蛋白faa文件bin_translated_genes\n</code></pre>\n<h2 id=\"可选-MetaWRAP单样本分别组装和分箱\"><a href=\"#可选-MetaWRAP单样本分别组装和分箱\" class=\"headerlink\" title=\"(可选)MetaWRAP单样本分别组装和分箱\"></a>(可选)MetaWRAP单样本分别组装和分箱</h2><p>多样本受硬件、计算时间限制无法完成时，需要单样本组装、分析。或想进一步提高组装质量，减少污染和杂合度，也可以单样本组装。</p>\n<h3 id=\"参数设定\"><a href=\"#参数设定\" class=\"headerlink\" title=\"参数设定\"></a>参数设定</h3><pre><code># 样本名\ni=ERR011347\n# 线程数\np=1\n# 任务数\nj=2\n# 定义完整度和污染率的阈值(50, 5; Finn NBT 2020; 50, 10, Bowers NBT 2017)\nc=50\nx=10\n</code></pre>\n<p>输和文件在seq目录</p>\n<pre><code>mkdir -p seq\nln -s `pwd`/temp/seq/*.fastq seq/\n</code></pre>\n<h3 id=\"1-megahit组装\"><a href=\"#1-megahit组装\" class=\"headerlink\" title=\"1 megahit组装\"></a>1 megahit组装</h3><p>单样本并行组装，13m，314m</p>\n<pre><code>rm -rf temp/megahit_*\ntime parallel -j $&#123;j&#125; \\\n&quot;metawrap assembly \\\n    -1 seq/&#123;&#125;_1.fastq \\\n    -2 seq/&#123;&#125;_2.fastq \\\n    -o temp/megahit_&#123;&#125; \\\n    -m 100 -t $&#123;p&#125; --megahit&quot; \\\n ::: `ls seq/|cut -f1 -d &#39;_&#39;|uniq`  \n</code></pre>\n<h3 id=\"2-运行三种bin软件\"><a href=\"#2-运行三种bin软件\" class=\"headerlink\" title=\"2 运行三种bin软件\"></a>2 运行三种bin软件</h3><pre><code># 192p, 15m (concoct会使用所有线程)\nparallel -j $&#123;j&#125; \\\n&quot;metawrap binning \\\n    -o temp/binning_&#123;&#125; -t $&#123;p&#125; \\\n    -a temp/megahit_&#123;&#125;/final_assembly.fasta \\\n    --metabat2 --maxbin2 --concoct \\\n    seq/&#123;&#125;_*.fastq&quot; \\\n::: `ls seq/|cut -f1 -d &#39;_&#39;|uniq`\n</code></pre>\n<h3 id=\"3-Bin提纯\"><a href=\"#3-Bin提纯\" class=\"headerlink\" title=\"3 Bin提纯\"></a>3 Bin提纯</h3><pre><code># 24p，10h\nparallel -j $&#123;j&#125; \\\n&quot;metawrap bin_refinement \\\n  -o temp/bin_refinement_&#123;&#125; -t $&#123;p&#125; \\\n  -A temp/binning_&#123;&#125;/metabat2_bins/ \\\n  -B temp/binning_&#123;&#125;/maxbin2_bins/ \\\n  -C temp/binning_&#123;&#125;/concoct_bins/ \\\n  -c $&#123;c&#125; -x $&#123;x&#125;&quot; \\\n::: `ls seq/|cut -f1 -d &#39;_&#39;|uniq`\n</code></pre>\n<h2 id=\"4-2-dRep去冗余种-株基因组集\"><a href=\"#4-2-dRep去冗余种-株基因组集\" class=\"headerlink\" title=\"4.2 dRep去冗余种/株基因组集\"></a>4.2 dRep去冗余种/株基因组集</h2><pre><code># 进入虚拟环境，没有用conda安装\n\n# conda activate drep\nsource $&#123;soft&#125;/bin/activate drep\ncd $&#123;wd&#125;/binning\n</code></pre>\n<p>合并所有bin至同一目录</p>\n<pre><code>mkdir -p temp/drep_in\n# 混合组装分箱并重命名\nln -s `pwd`/temp/bin_refinement/metawrap_50_10_bins/bin.* temp/drep_in/\nrename &#39;bin&#39; &#39;mix_all&#39; temp/drep_in/bin.*\n\n# 单样品组装分箱结果重命名\nfor i in `ls seq/|cut -f1 -d &#39;_&#39;|uniq`;do\n   ln -s `pwd`/temp/bin_refinement_$&#123;i&#125;/metawrap_50_10_bins/bin.* temp/drep_in/\n   rename &quot;bin.&quot; &quot;s_$&#123;i&#125;&quot; temp/drep_in/bin.*\ndone\n# 统计混合和单样本来源数据，10个混，5个单\nls temp/drep_in/|cut -f 1 -d &#39;_&#39;|uniq -c\n# 统计混合批次/单样本来源\nls temp/drep_in/|cut -f 2 -d &#39;_&#39;|cut -f 1 -d &#39;.&#39; |uniq -c\n</code></pre>\n<p>按种水平去冗余：15个为10个，8个来自混拼，2个来自单拼</p>\n<pre><code>mkdir -p temp/drep95\n# 15个，40min\ndRep dereplicate temp/drep95/ \\\n  -g temp/drep_in/*.fa \\\n  -sa 0.95 -nc 0.30 -comp 50 -con 10 -p 3\n</code></pre>\n<p>主要结果：</p>\n<ul>\n<li>非冗余基因组集：dereplicated_genomes/*.fa</li>\n<li>聚类信息表：data_tables/Cdb.csv</li>\n<li>聚类和质量图：firgures/<em>clustering</em></li>\n</ul>\n<p>(可选)按株水平汇总</p>\n<pre><code># 20-30min\nmkdir -p temp/drep95\ndRep dereplicate temp/drep95/ \\\n  -g temp/drep_in/*.fa \\\n  -sa 0.99 -nc 0.30 -comp 50 -con 10 -p 24\n</code></pre>\n<h2 id=\"4-3-GTDB-tk物种注释和进化树\"><a href=\"#4-3-GTDB-tk物种注释和进化树\" class=\"headerlink\" title=\"4.3 GTDB-tk物种注释和进化树\"></a>4.3 GTDB-tk物种注释和进化树</h2><p>启动软件所在虚拟环境</p>\n<pre><code># gtdbtk与drep安装在了同一个环境\n# conda activate gtdbtk\n</code></pre>\n<p>细菌基因组物种注释</p>\n<p>以上面鉴定的10个种为例，注意扩展名要与输入文件一致，可使用压缩格式gz。主要结果文件描述：此9个细菌基因组，结果位于tax.bac120开头的文件，如物种注释 tax.bac120.summary.tsv。古菌结果位于tax.ar122开头的文件中。</p>\n<pre><code>mkdir -p temp/gtdb_classify\n# 10个基因组，24p，100min 152 G内存\ngtdbtk classify_wf \\\n    --genome_dir temp/drep95/dereplicated_genomes \\\n    --out_dir temp/gtdb_classify \\\n    --extension fa \\\n    --prefix tax \\\n    --cpus 10\n</code></pre>\n<p>多序列对齐结果建树</p>\n<pre><code># 以9个细菌基因组的120个单拷贝基因建树，1s\nmkdir -p temp/gtdb_infer\ngtdbtk infer \\\n    --msa_file temp/gtdb_classify/tax.bac120.user_msa.fasta \\\n    --out_dir temp/gtdb_infer \\\n    --prefix tax \\\n    --cpus 2\n</code></pre>\n<p>树文件可使用iTOL在线美化，也可使用GraphLan本地美化。</p>\n<h2 id=\"4-4-table2itol制作树注释文件\"><a href=\"#4-4-table2itol制作树注释文件\" class=\"headerlink\" title=\"4.4 table2itol制作树注释文件\"></a>4.4 table2itol制作树注释文件</h2><p>以gtdb-tk物种注释(tax.bac120.summary.tsv)和drep基因组评估(Widb.csv)信息为注释信息</p>\n<pre><code>mkdir -p result/itol\n# 制作分类学表\ntail -n+2 temp/gtdb_classify/tax.bac120.summary.tsv|cut -f 1-2|sed &#39;s/;/\\t/g&#39;|sed &#39;1 s/^/ID\\tDomain\\tPhylum\\tClass\\tOrder\\tFamily\\tGenus\\tSpecies\\n/&#39; \\\n  &gt; result/itol/tax.txt\n# 基因组评估信息\nsed &#39;s/,/\\t/g;s/.fa//&#39; temp/drep95/data_tables/Widb.csv|cut -f 1-7,11|sed &#39;1 s/genome/ID/&#39; \\\n  &gt; result/itol/genome.txt\n# 整合注释文件\nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$0&#125; NR&gt;FNR&#123;print $0,a[$1]&#125;&#39; result/itol/genome.txt result/itol/tax.txt|cut -f 1-8,10- &gt; result/itol/annotation.txt\n</code></pre>\n<p>table2itol制作注释文件</p>\n<pre><code>cd result/itol/\n# 设置脚本位置\ndb=/disk1/db/script/table2itol/\n#db=/db\n\n## 方案1. 分类彩带、数值热图、种标签\n# -a 找不到输入列将终止运行（默认不执行）-c 将整数列转换为factor或具有小数点的数字，-t 偏离提示标签时转换ID列，-w 颜色带，区域宽度等， -D输出目录，-i OTU列名，-l 种标签替换ID\n# Fatal error: ??????&#39;./table2itol-master/table2itol.R&#39;: ?????????\nRscript $&#123;db&#125;/table2itol.R -a -c double -D plan1 -i ID -l Species -t %s -w 0.5 annotation.txt\n# 生成注释文件中每列为单独一个文件\n\n## 方案2. 数值柱形图，树门背景色，属标签\nRscript $&#123;db&#125;/table2itol.R -a -d -c none -D plan2 -b Phylum -i ID -l Genus -t %s -w 0.5 annotation.txt\n\n## 方案3.分类彩带、整数为柱、小数为热图\nRscript $&#123;db&#125;/table2itol.R -c keep -D plan3 -i ID -t %s annotation.txt\n\n## 方案4. 将整数转化成因子生成注释文件\nRscript $&#123;db&#125;/table2itol.R -a -c factor -D plan4 -i ID -l Genus -t %s -w 0 annotation.txt\n</code></pre>\n<h2 id=\"4-5-PROKKA单菌基因组功能注释\"><a href=\"#4-5-PROKKA单菌基因组功能注释\" class=\"headerlink\" title=\"4.5 PROKKA单菌基因组功能注释\"></a>4.5 PROKKA单菌基因组功能注释</h2><pre><code>conda activate metawrap\nexport PERL_5LIB=$&#123;PERL5LIB&#125;:$&#123;soft&#125;/envs/metawrap/lib/perl5/site_perl/5.22.0/\ni=bin1\ntime prokka result/contig/$&#123;db&#125;.fa \\\n  --kingdom Archaea,Bacteria --cpus 9 \\\n  --outdir temp/prokka/$&#123;db&#125; \n</code></pre>\n<h1 id=\"附录：常见分析问题和经验\"><a href=\"#附录：常见分析问题和经验\" class=\"headerlink\" title=\"附录：常见分析问题和经验\"></a>附录：常见分析问题和经验</h1><h2 id=\"质控KneadData\"><a href=\"#质控KneadData\" class=\"headerlink\" title=\"质控KneadData\"></a>质控KneadData</h2><h3 id=\"双端序列质控后是否配对的检查\"><a href=\"#双端序列质控后是否配对的检查\" class=\"headerlink\" title=\"双端序列质控后是否配对的检查\"></a>双端序列质控后是否配对的检查</h3><p>双端序列质控后序列数量不一致是肯定出错了。但即使序列数量一致，也可能序列不对。在运行metawrap分箱时会报错。可以kneaddata运行时添加–reorder来尝试解决。以下提供了检查双端序列ID是否配对的比较代码</p>\n<pre><code># 文件\ni=sample1\nseqkit seq -n -i temp/qc/$&#123;i&#125;_1_kneaddata_paired_1.fastq|cut -f 1 -d &#39;/&#39; | head &gt; temp/header_$&#123;i&#125;_1\nseqkit seq -n -i temp/qc/$&#123;i&#125;_1_kneaddata_paired_2.fastq|cut -f 1 -d &#39;/&#39; | head &gt; temp/header_$&#123;i&#125;_2\ncmp temp/header_$&#123;i&#125;_?\n</code></pre>\n<h3 id=\"Perl环境不匹配\"><a href=\"#Perl环境不匹配\" class=\"headerlink\" title=\"Perl环境不匹配\"></a>Perl环境不匹配</h3><p>报错’perl binaries are mismatched’的解决</p>\n<pre><code>e=~/miniconda3/envs/meta\nPERL5LIB=$&#123;e&#125;/lib/5.26.2:$&#123;e&#125;/lib/5.26.2/x86_64-linux-thread-multi\n</code></pre>\n<h3 id=\"Java不匹配——重装Java运行环境\"><a href=\"#Java不匹配——重装Java运行环境\" class=\"headerlink\" title=\"Java不匹配——重装Java运行环境\"></a>Java不匹配——重装Java运行环境</h3><p>若出现错误 Unrecognized option: -d64，则安装java解决：</p>\n<pre><code>conda install -c cyclus java-jdk\n</code></pre>\n<h2 id=\"读长分析HUMAnN2\"><a href=\"#读长分析HUMAnN2\" class=\"headerlink\" title=\"读长分析HUMAnN2\"></a>读长分析HUMAnN2</h2><h3 id=\"HUMAnN2减少输出文件加速\"><a href=\"#HUMAnN2减少输出文件加速\" class=\"headerlink\" title=\"HUMAnN2减少输出文件加速\"></a>HUMAnN2减少输出文件加速</h3><p>HUMAnN2是计算非常耗时的步骤，如果上百个10G+的样本，有时需要几周至几月的分析。以下介绍两种快速完成分析，而且结果变化不大的方法。替换下面for循环为原文中的“双端合并为单个文件”部分代码</p>\n<p>方法1. 软件分析不考虑双端信息，只用一端可获得相近结果，且速度提高1倍。链接质控结果左端高质量至合并目录</p>\n<pre><code>for i in `tail -n+2 result/metadata.txt|cut -f1`;do \n  ln -sf `pwd`/temp/qc/$&#123;i&#125;_1_kneaddata_paired_1.fastq temp/concat/$&#123;i&#125;.fq\ndone\n</code></pre>\n<p>方法2. 控制标准样比对时间。测序数据量通常为6<del>50G，同一样本分析时间可达10h</del>100h，严重浪费时间而浪费硬盘空间。<br>可用head对单端分析截取20M序列，即3G，则为80M行</p>\n<pre><code>for i in `tail -n+2 result/metadata.txt|cut -f1`;do \n   head -n80000000 temp/qc/$&#123;i&#125;_1_kneaddata_paired_1.fastq  &gt; temp/concat/$&#123;i&#125;.fq\ndone\n</code></pre>\n<h3 id=\"metaphlan2无法找到数据库\"><a href=\"#metaphlan2无法找到数据库\" class=\"headerlink\" title=\"metaphlan2无法找到数据库\"></a>metaphlan2无法找到数据库</h3><p>正常在首次运行时，会自动下载数据库。有时会失败，解决方法：</p>\n<p>方法1. 使用软件安装的用户运行一下程序即可下载成功</p>\n<p>方法2. 将我们预下载好的数据索引文件,链接到软件安装目录</p>\n<pre><code>db=~/db\nsoft=~/miniconda2\nmkdir -p $&#123;soft&#125;/bin/db_v20\nln -s $&#123;db&#125;/metaphlan2/* $&#123;soft&#125;/bin/db_v20/\nmkdir -p $&#123;soft&#125;/bin/databases\nln -s $&#123;db&#125;/metaphlan2/* $&#123;soft&#125;/bin/databases/\n</code></pre>\n<h3 id=\"CRITICAL-ERROR-Can-not-call-software-version-for-bowtie2\"><a href=\"#CRITICAL-ERROR-Can-not-call-software-version-for-bowtie2\" class=\"headerlink\" title=\"CRITICAL ERROR: Can not call software version for bowtie2\"></a>CRITICAL ERROR: Can not call software version for bowtie2</h3><p>解决问题思路：</p>\n<p>查看文件位置是否处在conda环境中：<code>type bowtie2</code>。如果不在需要手动设置环境变量的顺序，如果位置正确如在(~/miniconda2/envs/humann2/bin/bowtie2)，请往下看；</p>\n<p>检测bowtie2运行情况：<code>bowtie2 -h</code>，报错<code>wd.c: loadable library and perl binaries are mismatched (got handshake key 0xde00080, needed 0xed00080)</code>。 错误原因为Perl库版本错误，检查Perl库位置：<code>echo $PERL5LIB</code>，错误原因没有指向环境，并手动修改perl库位置</p>\n<pre><code># 设置你环境变量位置，最好用绝对路径\ne=~/miniconda2/envs/humann2\nPERL5LIB=$&#123;e&#125;/lib/5.26.2:$&#123;e&#125;/lib/5.26.2/x86_64-linux-thread-multi\n</code></pre>\n<h3 id=\"metaphlan-hclust-heatmap-py报错AttributeError-Unknown-property-axisbg\"><a href=\"#metaphlan-hclust-heatmap-py报错AttributeError-Unknown-property-axisbg\" class=\"headerlink\" title=\"metaphlan_hclust_heatmap.py报错AttributeError: Unknown property axisbg\"></a>metaphlan_hclust_heatmap.py报错AttributeError: Unknown property axisbg</h3><p>在网上搜索，axisbg和axis_bgcolor为过时的函数，新版为facecolor，修改为新名称即可 (参考：<a href=\"https://blog.csdn.net/qq_41185868/article/details/81842971\">https://blog.csdn.net/qq_41185868/article/details/81842971</a>)</p>\n<pre><code># 定位文件绝对路径\nfile=`type metaphlan_hclust_heatmap.py|cut -f 2 -d &#39;(&#39;|sed &#39;s/)//&#39;`\n# 替换函数名称为新版\nsed -i &#39;s/axisbg/facecolor/g&#39; $file\n</code></pre>\n<h3 id=\"metaphlan2-共有或特有物种网络图\"><a href=\"#metaphlan2-共有或特有物种网络图\" class=\"headerlink\" title=\"metaphlan2-共有或特有物种网络图\"></a>metaphlan2-共有或特有物种网络图</h3><pre><code>awk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;&#123;if(FNR==1) &#123;for(i=9;i&lt;=NF;i++) a[i]=$i; print &quot;Tax\\tGroup&quot;&#125; \\\n   else &#123;for(i=9;i&lt;=NF;i++) if($i&gt;0.05) print &quot;Tax_&quot;FNR, a[i];&#125;&#125;&#39; \\\n   result/metaphlan2/taxonomy.spf &gt; result/metaphlan2/taxonomy_highabundance.tsv\n   \nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;&#123;if(FNR==1) &#123;print &quot;Tax\\tGrpcombine&quot;;&#125; else a[$1]=a[$1]==&quot;&quot;?$2:a[$1]$2;&#125;END&#123;for(i in a) print i,a[i]&#125;&#39; \\\n   result/metaphlan2/taxonomy_highabundance.tsv &gt; result/metaphlan2/taxonomy_group.tsv\n\ncut -f 2 result/metaphlan2/taxonomy_group.tsv | tail -n +2 | sort -u &gt;group\n\nfor i in `cat group`; do printf &quot;#%02x%02x%02x\\n&quot; $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)); done &gt;colorcode\n\npaste group colorcode &gt;group_colorcode\n\nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;ARGIND==1&#123;a[$1]=$2;&#125;ARGIND==2&#123;if(FNR==1) &#123;print $0, &quot;Grpcombinecolor&quot;&#125; else print $0,a[$2]&#125;&#39; \\\n   group_colorcode result/metaphlan2/taxonomy_group.tsv &gt; result/metaphlan2/taxonomy_group2.tsv\n\nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;&#123;if(FNR==1) &#123;print &quot;Tax&quot;,$1,$2,$3,$4, $5, $6, $7, $8 &#125; else print &quot;Tax_&quot;FNR, $1,$2,$3,$4, $5,$6, $7, $8&#125;&#39; \\\n   result/metaphlan2/taxonomy.spf &gt; result/metaphlan2/taxonomy_anno.tsv\n</code></pre>\n<h2 id=\"生物标志鉴定LEfSe\"><a href=\"#生物标志鉴定LEfSe\" class=\"headerlink\" title=\"生物标志鉴定LEfSe\"></a>生物标志鉴定LEfSe</h2><h3 id=\"lefse-plot-cladogram-py：Unknown-property-axis-bgcolor\"><a href=\"#lefse-plot-cladogram-py：Unknown-property-axis-bgcolor\" class=\"headerlink\" title=\"lefse-plot_cladogram.py：Unknown property axis_bgcolor\"></a>lefse-plot_cladogram.py：Unknown property axis_bgcolor</h3><p>若出现错误 Unknown property axis_bgcolor，则修改<code>lefse-plot_cladogram.py</code>里的<code>ax_bgcolor</code>替换成<code>facecolor</code>即可。</p>\n<pre><code># 查看脚本位置，然后使用RStudio或Vim修改\ntype lefse-plot_cladogram.py\n</code></pre>\n<h2 id=\"物种分类Kraken2\"><a href=\"#物种分类Kraken2\" class=\"headerlink\" title=\"物种分类Kraken2\"></a>物种分类Kraken2</h2><h3 id=\"合并样本为表格combine-mpa-py\"><a href=\"#合并样本为表格combine-mpa-py\" class=\"headerlink\" title=\"合并样本为表格combine_mpa.py\"></a>合并样本为表格combine_mpa.py</h3><p>krakentools中combine_mpa.py，需手动安装脚本，且结果还需调整样本名</p>\n<pre><code>combine_mpa.py \\\n  -i `tail -n+2 result/metadata.txt|cut -f1|sed &#39;s/^/temp\\/kraken2\\//;s/$/.mpa/&#39;|tr &#39;\\n&#39; &#39; &#39;` \\\n  -o temp/kraken2/combined_mpa\n</code></pre>\n<h3 id=\"序列筛选-去宿主extract-kraken-reads-py\"><a href=\"#序列筛选-去宿主extract-kraken-reads-py\" class=\"headerlink\" title=\"序列筛选/去宿主extract_kraken_reads.py\"></a>序列筛选/去宿主extract_kraken_reads.py</h3><p>提取非植物33090和动物(人)33208序列、选择细菌2和古菌2157</p>\n<pre><code>mkdir -p temp/kraken2_qc\nparallel -j 3 \\\n  &quot;/db/script/extract_kraken_reads.py \\\n  -k temp/kraken2/&#123;1&#125;.output \\\n  -r temp/kraken2/&#123;1&#125;.report \\\n  -1 temp/qc/&#123;1&#125;_1_kneaddata_paired_1.fastq \\\n  -2 temp/qc/&#123;1&#125;_1_kneaddata_paired_2.fastq \\\n  -t 33090 33208 --include-children --exclude \\\n  --max 20000000 --fastq-output \\\n  -o temp/kraken2_qc/&#123;1&#125;_1.fq \\\n  -o2 temp/kraken2_qc/&#123;1&#125;_2.fq&quot; \\\n  ::: `tail -n+2 result/metadata.txt|cut -f1`\n</code></pre>\n<h2 id=\"组装Megahit\"><a href=\"#组装Megahit\" class=\"headerlink\" title=\"组装Megahit\"></a>组装Megahit</h2><h3 id=\"序列长度筛选\"><a href=\"#序列长度筛选\" class=\"headerlink\" title=\"序列长度筛选\"></a>序列长度筛选</h3><p>megahit默认&gt;200，可选 &gt; 500 / 1000 bp，并统计前后变化；如此处筛选 &gt; 500 bp，序列从15万变为3.5万条，总长度从7M下降到3M</p>\n<pre><code>mv temp/megahit/final.contigs.fa temp/megahit/raw.contigs.fa\nseqkit seq -m 500 temp/megahit/raw.contigs.fa &gt; temp/megahit/final.contigs.fa\nseqkit stat temp/megahit/raw.contigs.fa\nseqkit stat temp/megahit/final.contigs.fa\n</code></pre>\n<h3 id=\"数据太大导致程序中断\"><a href=\"#数据太大导致程序中断\" class=\"headerlink\" title=\"数据太大导致程序中断\"></a>数据太大导致程序中断</h3><p>报错信息：126 - Too many vertices in the unitig graph (8403694648 &gt;= 4294967294), you may increase the kmer size to remove tons</p>\n<p>解决方法：需要增加k-mer，如最小k-mer改为29，不行继续增加或将数据分批次组装</p>\n<p>添加参数： –k-min 29 –k-max 141 –k-step 20</p>\n<h2 id=\"组装MetaSpdades\"><a href=\"#组装MetaSpdades\" class=\"headerlink\" title=\"组装MetaSpdades\"></a>组装MetaSpdades</h2><h3 id=\"二三代混合组装\"><a href=\"#二三代混合组装\" class=\"headerlink\" title=\"二三代混合组装\"></a>二三代混合组装</h3><pre><code># 3G数据，耗时3h\ni=SampleA\ntime metaspades.py -t 48 -m 500 \\\n  -1 seq/$&#123;i&#125;_1.fastq -2 seq/$&#123;i&#125;L_2.fastq \\\n  --nanopore seq/$&#123;i&#125;.fastq \\\n  -o temp/metaspades_$&#123;i&#125;\n</code></pre>\n<h2 id=\"二三代混合组装OPERA-MS\"><a href=\"#二三代混合组装OPERA-MS\" class=\"headerlink\" title=\"二三代混合组装OPERA-MS\"></a>二三代混合组装OPERA-MS</h2><p>结果卡在第9步polishing，可添加–no-polishing参数跳过此步；短序列只支持成对文件，多个文件需要cat合并</p>\n<h3 id=\"二三代混合组装-1\"><a href=\"#二三代混合组装-1\" class=\"headerlink\" title=\"二三代混合组装\"></a>二三代混合组装</h3><pre><code>perl ../OPERA-MS.pl \\\n    --short-read1 R1.fastq.gz \\\n    --short-read2 R2.fastq.gz \\\n    --long-read long_read.fastq \\\n    --no-ref-clustering \\\n    --num-processors 32 \\\n    --out-dir RESULTS\n</code></pre>\n<h3 id=\"二代组装-三代优化\"><a href=\"#二代组装-三代优化\" class=\"headerlink\" title=\"二代组装+三代优化\"></a>二代组装+三代优化</h3><pre><code>perl ~/soft/OPERA-MS/OPERA-MS.pl \\\n    --contig-file temp/megahit/final.contigs.fa \\\n    --short-read1 R1.fastq.gz \\\n    --short-read2 R2.fastq.gz \\\n    --long-read long_read.fastq \\\n    --num-processors 32 \\\n    --no-ref-clustering \\\n    --no-strain-clustering \\\n    --no-polishing \\\n    --out-dir temp/opera\n</code></pre>\n<p>结果可用quast或seqkit stat统计对二代组装的改进效果</p>\n<h2 id=\"基因序列prodigal\"><a href=\"#基因序列prodigal\" class=\"headerlink\" title=\"基因序列prodigal\"></a>基因序列prodigal</h2><h3 id=\"序列拆分并行预测基因\"><a href=\"#序列拆分并行预测基因\" class=\"headerlink\" title=\"序列拆分并行预测基因\"></a>序列拆分并行预测基因</h3><p>(可选)以上注释大约1小时完成1M个基因的预测。加速可将contigs拆分，并行基因预测后再合并。</p>\n<pre><code># 拆分contigs，按1M条每个文件\nn=10000\nseqkit split result/megahit/final.contigs.fa -s $n\n# 生成拆分文件序列列表\nls result/megahit/final.contigs.fa.split/final.contigs.part_*.fa|cut -f 2 -d &#39;_&#39;|cut -f 1 -d &#39;.&#39; \\\n  &gt; temp/split.list\n# 9线程并行基因预测，此步只用单线程且读写强度不大\ntime parallel -j 9 \\\n  &quot;prodigal -i result/megahit/final.contigs.fa.split/final.contigs.part_&#123;&#125;.fa \\\n  -d temp/gene&#123;&#125;.fa  \\\n  -o temp/gene&#123;&#125;.gff -p meta -f gff \\\n  &gt; temp/gene&#123;&#125;.log 2&gt;&amp;1 &quot; \\\n  ::: `cat temp/split.list`\n# 合并预测基因和gff注释文件\ncat temp/gene*.fa &gt; temp/prodigal/gene.fa\ncat temp/gene*.gff &gt; temp/prodigal/gene.gff\n</code></pre>\n<h2 id=\"基因去冗余cd-hit\"><a href=\"#基因去冗余cd-hit\" class=\"headerlink\" title=\"基因去冗余cd-hit\"></a>基因去冗余cd-hit</h2><h3 id=\"两批基因合并cd-hit-est-2d\"><a href=\"#两批基因合并cd-hit-est-2d\" class=\"headerlink\" title=\"两批基因合并cd-hit-est-2d\"></a>两批基因合并cd-hit-est-2d</h3><p>cd-hit-est-2d 两批次构建非冗余基因集</p>\n<p>A和B基因集，分别有M和N个非冗余基因，两批数据合并后用cd-hit-est去冗余，计算量是(M + N) X (M + N -1)</p>\n<p>cd-hit-est-2d比较，只有M X N的计算量</p>\n<pre><code># 计算B中特有的基因\ncd-hit-est-2d -i A.fa -i2 B.fa -o B.uni.fa \\\n    -aS 0.9 -c 0.95 -G 0 -g 0 \\\n    -T 96 -M 0 -d 0\n# 合并为非冗余基因集\ncat A.fa B.uni.fa &gt; NR.fa\n</code></pre>\n<h3 id=\"cd-hit合并多批基因salmon索引时提示ID重复\"><a href=\"#cd-hit合并多批基因salmon索引时提示ID重复\" class=\"headerlink\" title=\"cd-hit合并多批基因salmon索引时提示ID重复\"></a>cd-hit合并多批基因salmon索引时提示ID重复</h3><pre><code># [error] In FixFasta, two references with the same name but different sequences: k141_2390219_1. We require that all input records have a unique name up to the first whitespace (or user-provided separator) character.\n# 错误解决\nmv temp/NRgene/gene.fa temp/NRgene/gene.fa.bak\n# 15G,2m,4G\nseqkit rename temp/NRgene/gene.fa.bak -o temp/NRgene/gene.fa\n</code></pre>\n<h2 id=\"基因定量salmon\"><a href=\"#基因定量salmon\" class=\"headerlink\" title=\"基因定量salmon\"></a>基因定量salmon</h2><h3 id=\"找不到库文件liblzma-so-0\"><a href=\"#找不到库文件liblzma-so-0\" class=\"headerlink\" title=\"找不到库文件liblzma.so.0\"></a>找不到库文件liblzma.so.0</h3><ul>\n<li>报错信息：error while loading shared libraries: liblzma.so.0</li>\n<li>问题描述：直接运行salmon报告，显示找不到lib库，</li>\n<li>解决方法：可使用程序完整路径解决问题，<code>alias salmon=&quot;$&#123;soft&#125;/envs/metagenome_env/share/salmon/bin/salmon&quot;</code></li>\n</ul>\n<h2 id=\"基因功能数据库\"><a href=\"#基因功能数据库\" class=\"headerlink\" title=\"基因功能数据库\"></a>基因功能数据库</h2><h3 id=\"综合功能注释KEGG描述整理\"><a href=\"#综合功能注释KEGG描述整理\" class=\"headerlink\" title=\"综合功能注释KEGG描述整理\"></a>综合功能注释KEGG描述整理</h3><p>脚本位于 /db/script 目录，<a href=\"https://www.kegg.jp/kegg-bin/show_brite?ko00001.keg\">https://www.kegg.jp/kegg-bin/show_brite?ko00001.keg</a> 下载htext，即为最新输入文件 ko00001.keg</p>\n<pre><code>kegg_ko00001_htext2tsv.pl -i ko00001.keg -o ko00001.tsv\n</code></pre>\n<h3 id=\"抗生素抗性CARD\"><a href=\"#抗生素抗性CARD\" class=\"headerlink\" title=\"抗生素抗性CARD\"></a>抗生素抗性CARD</h3><pre><code># 使用3.1.0和3.1.2均有警告，修改序列名至纯字母数数字也无效\n# WARNING 2021-07-08 08:58:00,478 : Exception : &lt;class &#39;KeyError&#39;&gt; -&gt; &#39;5141&#39; -&gt; Model(1692) missing in database. Please generate new database.\n# WARNING 2021-07-08 08:58:00,478 : Exception : &lt;class &#39;KeyError&#39;&gt; -&gt; &#39;5141&#39; -&gt; Model(1692)\n# WARNING 2021-07-08 08:58:00,479 : tetM ---&gt; hsp.bits: 60.8 &lt;class &#39;float&#39;&gt; ? &lt;class &#39;str&#39;&gt;\n</code></pre>\n<h3 id=\"抗生素抗性ResFam\"><a href=\"#抗生素抗性ResFam\" class=\"headerlink\" title=\"抗生素抗性ResFam\"></a>抗生素抗性ResFam</h3><p>数据库：<a href=\"http://www.dantaslab.org/resfams\">http://www.dantaslab.org/resfams</a></p>\n<p>参考文献：<a href=\"http://doi.org/10.1038/ismej.2014.106\">http://doi.org/10.1038/ismej.2014.106</a></p>\n<pre><code>mkdir -p temp/resfam result/resfam\n# 比对至抗生素数据库 1m\ntime diamond blastp \\\n  --db $&#123;db&#125;/resfam/Resfams-proteins \\\n  --query result/NR/protein.fa \\\n  --threads 9 --outfmt 6 --sensitive \\\n  -e 1e-5 --max-target-seqs 1 --quiet \\\n  --out temp/resfam/gene_diamond.f6\n# 提取基因对应抗性基因列表\ncut -f 1,2 temp/resfam/gene_diamond.f6 | uniq | \\\n  sed &#39;1 i Name\\tResGeneID&#39; &gt; temp/resfam/gene_fam.list\n# 统计注释基因的比例, 488/19182=2.5%\nwc -l temp/resfam/gene_fam.list  result/salmon/gene.count \n# 按列表累计丰度\nsummarizeAbundance.py \\\n  -i result/salmon/gene.TPM \\\n  -m temp/resfam/gene_fam.list \\\n  -c 2 -s &#39;,&#39; -n raw \\\n  -o result/resfam/TPM\n# 结果中添加FAM注释，spf格式用于stamp分析\nawk &#39;BEGIN&#123;FS=OFS=&quot;\\t&quot;&#125; NR==FNR&#123;a[$1]=$4&quot;\\t&quot;$3&quot;\\t&quot;$2&#125; NR&gt;FNR&#123;print a[$1],$0&#125;&#39; \\\n  $&#123;db&#125;/resfam/Resfams-proteins_class.tsv  result/resfam/TPM.ResGeneID.raw.txt \\\n  &gt; result/resfam/TPM.ResGeneID.raw.spf\n</code></pre>\n<h2 id=\"细菌基因组物种注释GTDB\"><a href=\"#细菌基因组物种注释GTDB\" class=\"headerlink\" title=\"细菌基因组物种注释GTDB\"></a>细菌基因组物种注释GTDB</h2><p>菌的文件名不要存在非字母数字的符号，否则运行会报错。</p>\n<pre><code># ERROR: [&#39;BMN5&#39;] are not present in the input list of genome to process，但并无此菌，可能是名称 中存在&quot;-&quot;或&quot;.&quot;，替换为i\n# 修改metadata\nsed &#39;s/-/i/;s/\\./i/&#39; result/metadatab.txt &gt; result/metadata.txt\n# 修改文件名\nawk &#39;BEGIN&#123;OFS=FS=&quot;\\t&quot;&#125;&#123;system(&quot;mv temp/antismash/&quot;$1&quot;.fna temp/antismash/&quot;$2&quot;.fna&quot;)ll &#125;&#39; &lt;(paste result/metadatab.txt result/metadata.txt|tail -n+2)\n</code></pre>\n<h1 id=\"版本更新记录\"><a href=\"#版本更新记录\" class=\"headerlink\" title=\"版本更新记录\"></a>版本更新记录</h1><h2 id=\"1-08-2020-7-20\"><a href=\"#1-08-2020-7-20\" class=\"headerlink\" title=\"1.08 2020.7.20\"></a>1.08 2020.7.20</h2><ol>\n<li>KneadData提供数据预处理双端标签唯一命令，兼容最新版；</li>\n<li>提供HUMAnN3测试版的安装和分析流程(附录1)；</li>\n<li>eggNOG升级为emapper 2.0和eggNOG 5.0流程，结果列表从13列变为22列，新增CAZy注释。emapper 1.0版本见附录2。</li>\n</ol>\n<h2 id=\"1-09-2020-10-16\"><a href=\"#1-09-2020-10-16\" class=\"headerlink\" title=\"1.09 2020.10.16\"></a>1.09 2020.10.16</h2><ol>\n<li>新增二、三代混合组装OPERA-MS软件使用 (31Megahit)</li>\n<li>新增eggNOG-mapper结果COG/KO/CAZy整理脚本summarizeAbundance.py，删除旧版Shell+R代码 (32Annotation)</li>\n<li>新增MetaWRAP单样本分箱流程 (33Binning)</li>\n<li>新增dRep实现基因组去冗余 (34Genomes)</li>\n<li>新增GTDB-Tk基因组物种注释和进化树构建 (34Genomes)</li>\n</ol>\n<h2 id=\"1-10-2021-1-22\"><a href=\"#1-10-2021-1-22\" class=\"headerlink\" title=\"1.10 2021.1.22\"></a>1.10 2021.1.22</h2><ol>\n<li>增加删除中间文件部分，节约空间，防止硬盘写满；</li>\n<li>正文的补充分析方法、常见问题移至附录，按软件名、问题/方法分级索引；</li>\n<li>软件使用前，增加检查软件版本命令，方便文章方法中撰写准确版本；</li>\n<li>删除不稳定的humann3、过时的eggnog版本教程；</li>\n<li>增加kraken2新环境, 增加bracken, krakentools新工具；</li>\n<li>kraken2结果新增beta多样性PCoA，物种组成堆叠柱状图；</li>\n<li>增metaspades二、三代组装代码示例；</li>\n<li>新增KEGG层级注释整理代码；</li>\n<li>更新dbCAN2中2018版为2020版；</li>\n<li>新增CARD本地分析流程；</li>\n</ol>\n<h2 id=\"1-11-2021-5-7\"><a href=\"#1-11-2021-5-7\" class=\"headerlink\" title=\"1.11 2021.5.7\"></a>1.11 2021.5.7</h2><ol>\n<li>增加prodigal基因预测并行版方法，使用seqkit split拆分后并行，数10倍加速单线程基因预测步骤；</li>\n<li>增加megahit拼装结果片段大小选择步骤，使用seqkit -m按长度筛选，并统计筛选前后变化；</li>\n<li>不常用或可选代码调整到附录</li>\n<li>两批数据快速合并去冗余cd-hit-est-2d</li>\n<li>二三代混合组装OPERA-MS的混装和3代优化代码</li>\n</ol>\n<h4 id=\"1-12-2021-8-20\"><a href=\"#1-12-2021-8-20\" class=\"headerlink\" title=\"1.12 2021.8.20\"></a>1.12 2021.8.20</h4><ol>\n<li>新增并行管理软件rush，比parallel更易安装，绿色版无依赖关系，整合在db/linux/目录中</li>\n<li>新增seqkit，可以统计序列数据量，支持序列长度过滤，格式转换等；</li>\n<li>新增质控软件fastp，软件fastqc更快，适合单独质控不去宿主；</li>\n<li>kraken2新数据库，同样大小下注释率提高明显；</li>\n<li>eggNOG软件和数据库配套升级</li>\n<li>GTDB-tk软件和数据库需要配套重新才可使用新版25万基因组数据库</li>\n</ol>\n<h4 id=\"1-13-2021-11-19\"><a href=\"#1-13-2021-11-19\" class=\"headerlink\" title=\"1.13 2021.11.19\"></a>1.13 2021.11.19</h4><ol>\n<li>陈同参与EasyMicrobiome的更新，并提交了mac版本代码</li>\n<li>新增humann2运行bowtie2出错的解决方案</li>\n</ol>\n<h4 id=\"1-14-2022-3-25\"><a href=\"#1-14-2022-3-25\" class=\"headerlink\" title=\"1.14 2022.3.25\"></a>1.14 2022.3.25</h4><ol>\n<li>EasyMicrobiome升级为1.14</li>\n<li>升级miniconda2为miniconda3</li>\n<li>dbcan2从2020/7/31的808M更新为2021/9/24版1016M，格式变化，配套format_dbcan2list.pl更新</li>\n<li>新增eggnog环境，包含emapper 2.1.6，summarizeAbundance.py含pandas (conda install sklearn-pandas)，配套更新数据库</li>\n<li>rgi更新到最新版及配套代码</li>\n</ol>\n","categories":["2023"],"tags":["生物信息软件流程"]}]